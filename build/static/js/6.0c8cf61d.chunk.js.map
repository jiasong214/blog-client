{"version":3,"sources":["components/BackBtn.jsx","pages/CreatePost.jsx","components/Markdown.jsx"],"names":["BackBtn","className","to","React","memo","CreatePost","postService","createPost","history","updatePost","useHistory","params","useParams","useState","formerData","setFormerData","title","setTitle","markdown","setMarkdown","useEffect","id","getPostById","then","data","catch","console","error","text","type","placeholder","value","onChange","event","target","onClick","preventDefault","alert","validateTitle","push","Markdown","syntaxHighlighter","code","node","inline","children","props","match","exec","style","materialDark","language","PreTag","String","replace","components","remarkPlugins","gfm"],"mappings":"iHAAA,2CAKMA,EAAU,WACd,OACE,uBAAOC,UAAU,UAAjB,SACE,8BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,8BAQOC,QAAMC,KAAKJ,I,qJCVpBK,EAAa,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,WAC1BC,GADsD,EAAhBC,WAC5BC,eACVC,EAASC,cACf,EAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGAC,qBAAU,WACLT,EAAOU,IACRf,EACGgB,YAAYX,EAAOU,IACnBE,MAAK,SAACC,GAAD,OAAUT,EAAcS,MAC7BC,MAAMC,QAAQC,WAElB,CAACrB,EAAaK,EAAOU,KAGxBD,qBAAU,WACLN,IAEDG,EAASH,EAAWE,OACpBG,EAAYL,EAAWc,SAExB,CAACd,IA2CJ,OACE,qCACE,cAAC,IAAD,IACA,sBAAKb,UAAU,aAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,uBACE4B,KAAK,OACL5B,UAAU,oBACV6B,YAAY,aACZC,MAAOf,GAAgB,GACvBgB,SAlDY,SAACC,GAAD,OAAWhB,EAASgB,EAAMC,OAAOH,YAqDjD,sBAAK9B,UAAU,qBAAf,UACI,0BAAU+B,SArDK,SAACC,GAAD,OAAWd,EAAYc,EAAMC,OAAOH,QAqDbA,MAAOb,IAC7C,qBAAKjB,UAAU,uBAAf,SACE,cAAC,IAAD,CAAU2B,KAAMV,SAGtB,qBAAKjB,UAAU,uBAAf,SACE,wBAAQkC,QA9CC,SAACF,GAChBA,EAAMG,iBAXc,SAACpB,GACrB,MAAa,KAAVA,IACDqB,MAAM,6BACC,GAWLC,CAActB,KAEfL,EAAOU,IAERf,EACGG,WAAWE,EAAOU,GAAIL,EAAOE,GAG7BO,MAAMC,QAAQC,OAEjBnB,EAAQ+B,KAAR,gBAAsB5B,EAAOU,OAG7Bf,EACGC,WAAWS,EAAOE,GAClBK,MAAK,SAACC,GAAD,OAAUjB,EAAWiB,MAC1BC,MAAMC,QAAQC,OAEjBnB,EAAQ+B,KAAK,QAwBkBtC,UAAU,wBAArC,8BAOKE,cAAMC,KAAKC,I,2KCpEXmC,IAzBE,SAAC,GAAY,IAAXZ,EAAU,EAAVA,KAEXa,EAAoB,CACxBC,KADwB,YAC4B,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQ3C,EAAgC,EAAhCA,UAAW4C,EAAqB,EAArBA,SAAaC,EAAQ,iBAC5CC,EAAQ,iBAAiBC,KAAK/C,GAAa,IACjD,OAAQ2C,GAAUG,EAChB,cAAC,IAAD,aAAmBE,MAAOC,IAAcC,SAAUJ,EAAM,GAAIK,OAAO,MAAMP,SAAUQ,OAAOR,GAAUS,QAAQ,MAAO,KAASR,IAE5H,8CAAM7C,UAAWA,GAAe6C,GAAhC,aACGD,OAMT,OACE,qBAAK5C,UAAU,WAAf,SACE,cAAC,IAAD,CACEsD,WAAYd,EACZe,cAAe,CAACC,KAChBZ,SAAUjB,Q","file":"static/js/6.0c8cf61d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../style/backBtn.scss';\n\n\nconst BackBtn = () => {\n  return (\n    <aside className=\"backBtn\">\n      <div>\n        <Link to='/'>\n          &larr; Back\n        </Link>\n      </div>\n    </aside>\n  )\n}\n\nexport default React.memo(BackBtn);","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport BackBtn from '../components/BackBtn';\nimport Markdown from '../components/Markdown';\nimport '../style/createPost.scss';\n\nconst CreatePost = ({postService, createPost, updatePost}) => {\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [title, setTitle] = useState();\n  const [markdown, setMarkdown] = useState('');\n\n  //UPDATE: if it's for update, set post's data\n  useEffect(() => {\n    if(params.id){\n      postService\n        .getPostById(params.id)\n        .then((data) => setFormerData(data))\n        .catch(console.error());\n    }\n  }, [postService, params.id]);\n\n  //UPDATE: after formerData is set, set all input state with that.\n  useEffect(() => {\n    if(formerData){\n      //set former state\n      setTitle(formerData.title);\n      setMarkdown(formerData.text);\n    }\n  }, [formerData])\n\n  //input handling\n  const onTitleChange = (event) => setTitle(event.target.value);\n  const onMarkdownChange = (event) => setMarkdown(event.target.value);\n\n  //input validating\n  const validateTitle = (title) => {\n    if(title === '') {\n      alert(\"Title must be filled out\");\n      return false;\n    }\n    return true;\n  }\n\n\n  //form submit\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    //if title is not filled out, return\n    if(!validateTitle(title)) return;\n\n    if(params.id){\n    //UPDATE\n      postService\n        .updatePost(params.id, title, markdown)\n        // .then((data) => updatePost(params.id, data))\n        // changePostsByCreate로 연결이 안됨.\n        .catch(console.error);\n\n      history.push(`/post/${params.id}`);\n    }else {\n    //CREATE\n      postService\n        .createPost(title, markdown)\n        .then((data) => createPost(data))\n        .catch(console.error);\n\n      history.push(\"/\");\n    }\n  }\n\n  return (\n    <>\n      <BackBtn />\n      <div className=\"createPost\">\n        <div className=\"createPost-titlebox\">\n          <input \n            type=\"text\" \n            className=\"createPost__title\" \n            placeholder=\"Post Title\" \n            value={title ? title : ''}\n            onChange={onTitleChange} \n          />\n          </div>\n        <div className=\"createPost-textbox\">\n            <textarea onChange={onMarkdownChange} value={markdown}></textarea>\n            <div className=\"createPost__markdown\">\n              <Markdown text={markdown} />\n            </div>\n          </div>\n        <div className=\"createPost-buttonbox\">\n          <button onClick={onSubmit} className=\"createPost__submitBtn\">Compost</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default React.memo(CreatePost);","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\nimport {materialDark} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport gfm from 'remark-gfm';\nimport '../style/markdown.scss';\n\n\nconst Markdown = ({text}) => {\n\n  const syntaxHighlighter = {\n    code({node, inline, className, children, ...props}) {\n      const match = /language-(\\w+)/.exec(className || '')\n      return !inline && match ? (\n        <SyntaxHighlighter style={materialDark} language={match[1]} PreTag=\"div\" children={String(children).replace(/\\n$/, '')} {...props} />\n      ) : (\n        <code className={className} {...props}>\n          {children}\n        </code>\n      )\n    }\n  }\n\n  return (\n    <div className=\"markdown\">\n      <ReactMarkdown\n        components={syntaxHighlighter}\n        remarkPlugins={[gfm]} \n        children={text} />\n    </div>\n  )\n}\n\nexport default Markdown;"],"sourceRoot":""}