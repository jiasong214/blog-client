{"version":3,"sources":["context/AuthContext.jsx","components/Footer.jsx","App.js","network/http.js","service/post.js","service/auth.js","index.js"],"names":["AuthContext","createContext","AuthProvider","authService","children","useState","undefined","user","setUser","useEffect","me","then","data","onLogin","useCallback","username","password","a","login","onLogout","logout","context","useMemo","Provider","value","useAuth","useContext","Footer","history","useHistory","className","token","onClick","window","confirm","push","to","Main","lazy","Post","Login","CreatePost","App","postService","posts","setPosts","getPosts","error","console","fallback","exact","path","createPost","post","updatePost","id","updated","map","parseInt","deletePost","filter","component","HttpClient","baseURL","this","url","options","fetch","headers","credentials","res","json","status","message","Error","PostService","http","start","method","title","text","body","JSON","stringify","AuthService","httpClient","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb3a9f2c.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, createContext, useContext } from 'react';\n\nexport const AuthContext = createContext({});\n\nexport const AuthProvider = ({authService, children}) => {\n  const [user, setUser] = useState(undefined);\n\n  useEffect(() => {\n    authService\n      .me()\n      .then((data) => setUser(data));\n  }, [authService]);\n\n  const onLogin = useCallback(async (username, password) => {\n    authService\n      .login(username, password)\n      .then((data) => setUser(data))\n  }, [authService])\n\n  const onLogout = useCallback(async () => {\n    authService\n      .logout()\n      .then(() => setUser(undefined));\n  }, [authService])\n\n  const context = useMemo(() => ({\n    user, onLogin, onLogout\n  }), [user, onLogin, onLogout])\n\n  return (\n    <AuthContext.Provider value={context}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => useContext(AuthContext);","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport '../style/footer.scss';\n\nconst Footer = () => {\n  const history = useHistory();\n  const { user, onLogout } = useAuth();\n\n  const onClickLogout = () => {\n    if (window.confirm('Do you want to log out?')) {\n      onLogout();\n      history.push('/');\n    }\n  }\n\n  return (\n    <footer className=\"footer\">\n       {user ? user.token ? \n          <div className='footer__logout' onClick={onClickLogout}>Logout Admin</div> : \n          <Link className=\"footer__login\" to='/login'>Admin account</Link> :\n          <Link className=\"footer__login\" to='/login'>Admin account</Link>\n        }\n      <p className=\"footer__copyright\">\n        &copy; 2021 Jia Song\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Footer from './components/Footer';\n// import usePost from './hooks/usePost';\n\nconst Main = lazy(() => import('./pages/Main'));\nconst Post = lazy(() => import('./pages/Post'));\nconst Login = lazy(() => import('./pages/Login'));\nconst CreatePost = lazy(() => import('./pages/CreatePost'));\n\nfunction App({postService}) {\n  // const [postsNumber, setPostsNumber] = useState(0);\n\n  // const { \n  //   loading,\n  //   error,\n  //   posts,\n  //   total,\n  //   createPost,\n  //   updatePost,\n  //   deletePost\n  //  } = usePost({postService, postsNumber});\n\n  // const changePostsNumber = () => {\n  //   setPostsNumber((postsNumber) => postsNumber + 4);\n  // }\n\n  const [ posts, setPosts ] = useState([]);\n\n  useEffect(() => {\n    postService\n      .getPosts()\n      .then(data => setPosts(data))\n      .error(console.error)\n  }, [postService]);\n\n  const deletePost = (id) => {\n    setPosts(() => posts.filter((post) => parseInt(post.id) !== parseInt(id)));\n  };\n\n  const createPost = (post) => {\n    setPosts(() => [post, ...posts]);\n  };\n\n  const updatePost = (id, updated) => {\n    setPosts(() => posts.map((post) => parseInt(post.id) === parseInt(id) ? updated : post));\n  };\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div>Loading..... suspense...</div>}>\n        <Switch>\n\n          {/* main: all posts */}\n          <Route exact path=\"/\">\n            <Main \n              postService={postService}  \n              // changePostsNumber={changePostsNumber}\n              posts={posts}\n              // total={total}\n              // loading={loading}\n              // error={error}\n            />\n          </Route>\n\n          {/* create post page */}\n          <Route exact path=\"/post/compose\">\n            <CreatePost \n              postService={postService} \n              createPost={createPost}\n              updatePost={updatePost}\n            />\n          </Route>\n\n          {/* post(id) page */}\n          <Route exact path=\"/post/:id\">\n            <Post \n              postService={postService} \n              deletePost={deletePost}\n            />\n          </Route>\n\n          {/* edit post(id)  */}\n          <Route exact path=\"/post/:id/edit\">\n            <CreatePost postService={postService} />\n          </Route>\n\n          {/* login page  */}\n          <Route exact path=\"/login\" component={Login} />\n\n        </Switch>\n      </Suspense>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","export default class HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async fetch(url, options) {\n    //set all http options, and fetch data\n    const res = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include',\n    });\n\n    //fomat data to json, and catch error\n    let data;\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    }\n\n    //if there is error in respond, throw error message\n    if (res.status > 299 || res.status < 200) {\n      const message =\n        data && data.message ? data.message : 'http error!';\n\n      return new Error(message);\n    }\n\n    //if everything is okay, return json data\n    return data;\n  }\n}\n","export default class PostService {\n  constructor (http) {\n    this.http = http;\n  }\n\n  async getPosts(start) {\n    return this.http.fetch(`/posts/start=${start}`, {\n      method: 'GET'\n    });\n  }\n\n  async getPostById(id) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'GET',\n    });\n  }\n\n  async createPost(title, text) {\n    return this.http.fetch(`/posts`, {\n      method: 'POST',\n      body: JSON.stringify({ title, text })\n    });\n  }\n\n  async updatePost(id, title, text) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ title, text })\n    });\n  }\n\n  async deletePost(id) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'DELETE',\n    });\n  }\n}","export default class AuthService {\n  constructor (http) {\n    this.http = http;\n  }\n\n  async login(username, password) {\n    return this.http.fetch(`/auth/login`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password })\n    });\n  }\n\n  async logout() {\n    return this.http.fetch(`/auth/logout`, {\n      method: 'POST',\n    });\n  }\n\n  async me() { \n    return this.http.fetch(`/auth/me`, {\n      method: 'GET',\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { AuthProvider } from './context/AuthContext';\nimport HttpClient from './network/http';\nimport PostService from './service/post.js';\nimport AuthService from './service/auth';\n\n//basic api url\nconst baseURL = 'https://jia-blog.herokuapp.com';\n// const baseURL = `http://localhost:8080`;\n\n//class that has http common option and error handling\nconst httpClient = new HttpClient(baseURL);\n\n//class that controll all post/auth related APIs\nconst postService = new PostService(httpClient);\nconst authService = new AuthService(httpClient);\n\n// //basic url\n// const routeBase = '/blog-client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <AuthProvider authService={authService}>\n        <App postService={postService} />\n      </AuthProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}