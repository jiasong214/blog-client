{"version":3,"sources":["context/AuthContext.jsx","hooks/usePost.jsx","App.js","network/http.js","service/post.js","service/auth.js","index.js"],"names":["AuthContext","createContext","AuthProvider","authService","children","useState","undefined","user","setUser","useEffect","me","then","data","onLogin","useCallback","username","password","a","login","onLogout","logout","context","useMemo","Provider","value","useAuth","useContext","usePost","postService","loading","setLoading","error","setError","posts","setPosts","total","setTotal","currentPostIndex","setCurrentPostIndex","getPosts","result","prev","Set","catch","createPost","post","updatePost","id","updated","map","parseInt","deletePost","filter","updateCurrentPostIndex","currentNum","console","log","Main","lazy","Post","Login","CreatePost","App","location","useLocation","className","fallback","AnimatePresence","exitBeforeEnter","exact","path","render","component","pathname","HttpClient","baseURL","this","url","options","fetch","headers","credentials","res","json","status","message","Error","PostService","http","start","method","title","text","body","JSON","stringify","AuthService","httpClient","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c2a9570.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, createContext, useContext } from 'react';\n\nexport const AuthContext = createContext({});\n\nexport const AuthProvider = ({authService, children}) => {\n  const [user, setUser] = useState(undefined);\n\n  useEffect(() => {\n    authService\n      .me()\n      .then((data) => setUser(data));\n  }, [authService]);\n\n  const onLogin = useCallback(async (username, password) => {\n    return authService\n      .login(username, password)\n      .then((data) => {\n        setUser(data);\n        return data;\n      })\n  }, [authService])\n\n  const onLogout = useCallback(async () => {\n    authService\n      .logout()\n      .then(() => setUser(undefined));\n  }, [authService])\n\n  const context = useMemo(() => ({\n    user, onLogin, onLogout\n  }), [user, onLogin, onLogout])\n\n  return (\n    <AuthContext.Provider value={context}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => useContext(AuthContext);","import { useState, useEffect } from 'react';\n\n\nconst usePost = ({postService}) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [ currentPostIndex, setCurrentPostIndex ] = useState(0);\n\n  //load new data whenever currentPostIndex is changed\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n\n    postService\n      .getPosts(currentPostIndex)\n      .then(result => {\n        setTotal(result.total);\n        return result.data;\n      })\n      .then((data) => setPosts((prev) => [...new Set([...prev, ...data])]))\n      .then(() => setLoading(false))\n      .catch(() => setError(true));\n  }, [postService, currentPostIndex])\n\n  //update current index to get more post\n  const updateCurrentPostIndex = (currentNum) => {\n    setCurrentPostIndex(currentNum);\n    console.log(`Getting more posts from index ${currentNum}...`);\n  }\n\n  const deletePost = (id) => {\n    setPosts(() => posts.filter((post) => parseInt(post.id) !== parseInt(id)));\n  };\n\n  const createPost = (post) => {\n    setPosts(() => [post, ...posts]);\n  };\n\n  const updatePost = (id, updated) => {\n    setPosts(() => posts.map((post) => parseInt(post.id) === parseInt(id) ? updated : post));\n  };\n\n  return { posts, total, loading, error, createPost, updatePost, deletePost, updateCurrentPostIndex }\n}\n\nexport default usePost;","import { AnimatePresence } from 'framer-motion';\nimport React, { lazy, Suspense } from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport usePost from './hooks/usePost';\n\nconst Main = lazy(() => import('./pages/Main'));\nconst Post = lazy(() => import('./pages/Post'));\nconst Login = lazy(() => import('./pages/Login'));\nconst CreatePost = lazy(() => import('./pages/CreatePost'));\n\nfunction App({postService}) {\n  const { \n    posts,\n    total,\n    createPost, \n    updatePost, \n    deletePost,\n    updateCurrentPostIndex,\n   } = usePost({postService});\n  const location = useLocation();\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div/>}>\n        <AnimatePresence exitBeforeEnter>\n          <Switch key={location.pathname} location={location}>\n            {/* main: all posts */}\n            <Route \n              exact path=\"/\"\n              render={() =>\n                <Main \n                  postService={postService}  \n                  posts={posts}\n                  total={total}\n                  updateCurrentPostIndex={updateCurrentPostIndex}\n                />\n              }\n            />\n            {/* create post page */}\n            <Route \n              exact path=\"/post/compose\"\n              render={() =>\n                <CreatePost \n                  postService={postService} \n                  createPost={createPost}\n                  updatePost={updatePost}\n                />\n              }/>\n            {/* post(id) page */}\n            <Route \n              exact path=\"/post/:id\"\n              render={() =>\n                <Post \n                  postService={postService} \n                  deletePost={deletePost}\n                />\n              }\n            />\n            {/* edit post(id)  */}\n            <Route \n              exact path=\"/post/:id/edit\"\n              render={() =>\n                <CreatePost \n                  postService={postService} \n                />\n              }\n            />\n            {/* login page  */}\n            <Route exact path=\"/login\" component={Login} />\n          </Switch>\n        </AnimatePresence>\n      </Suspense>\n      \n      <div>\n        <div id=\"background\" />\n        <div id=\"background-effect1\" />\n        <div id=\"background-effect2\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default class HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async fetch(url, options) {\n    //set all http options, and fetch data\n    const res = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include',\n    });\n\n    //fomat data to json, and catch error\n    let data;\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    }\n\n    //if there is error in respond, throw error message\n    if (res.status > 299 || res.status < 200) {\n      const message =\n        data && data.message ? data.message : 'http error!';\n\n      return new Error(message);\n    }\n\n    //if everything is okay, return json data\n    return data;\n  }\n}\n","export default class PostService {\n  constructor (http) {\n    this.http = http;\n  }\n\n  async getPosts(start) {\n    return this.http.fetch(`/posts/?start=${start}`, {\n      method: 'GET'\n    });\n  }\n\n  async getPostById(id) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'GET',\n    });\n  }\n\n  async createPost(title, text) {\n    return this.http.fetch(`/posts`, {\n      method: 'POST',\n      body: JSON.stringify({ title, text })\n    });\n  }\n\n  async updatePost(id, title, text) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ title, text })\n    });\n  }\n\n  async deletePost(id) {\n    return this.http.fetch(`/posts/${id}`, {\n      method: 'DELETE',\n    });\n  }\n}","export default class AuthService {\n  constructor (http) {\n    this.http = http;\n  }\n\n  async login(username, password) {\n    return this.http.fetch(`/auth/login`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password })\n    });\n  }\n\n  async logout() {\n    return this.http.fetch(`/auth/logout`, {\n      method: 'POST',\n    });\n  }\n\n  async me() { \n    return this.http.fetch(`/auth/me`, {\n      method: 'GET',\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { AuthProvider } from './context/AuthContext';\nimport HttpClient from './network/http';\nimport PostService from './service/post.js';\nimport AuthService from './service/auth';\n\n//basic api url\nconst baseURL = 'https://jia-blog.herokuapp.com';\n// const baseURL = `http://localhost:8080`;\n\n//class that has http common option and error handling\nconst httpClient = new HttpClient(baseURL);\n\n//class that controll all post/auth related APIs\nconst postService = new PostService(httpClient);\nconst authService = new AuthService(httpClient);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <AuthProvider authService={authService}>\n        <App postService={postService} />\n      </AuthProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}