{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_schema_list_1 = require(\"prosemirror-schema-list\");\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nclass CheckboxItem extends Node_1.default {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = event => {\n      const {\n        view\n      } = this.editor;\n      const {\n        tr\n      } = view.state;\n      const {\n        top,\n        left\n      } = event.target.getBoundingClientRect();\n      const result = view.posAtCoords({\n        top,\n        left\n      });\n\n      if (result) {\n        const transaction = tr.setNodeMarkup(result.inside, undefined, {\n          checked: event.target.checked\n        });\n        view.dispatch(transaction);\n      }\n    };\n  }\n\n  get name() {\n    return \"checkbox_item\";\n  }\n\n  get schema() {\n    return {\n      attrs: {\n        checked: {\n          default: false\n        }\n      },\n      content: \"paragraph block*\",\n      defining: true,\n      draggable: true,\n      parseDOM: [{\n        tag: `li[data-type=\"${this.name}\"]`,\n        getAttrs: dom => ({\n          checked: dom.className.includes(\"checked\")\n        })\n      }],\n      toDOM: node => {\n        const input = document.createElement(\"input\");\n        input.type = \"checkbox\";\n        input.tabIndex = -1;\n        input.addEventListener(\"change\", this.handleChange);\n\n        if (node.attrs.checked) {\n          input.checked = true;\n        }\n\n        return [\"li\", {\n          \"data-type\": this.name,\n          class: node.attrs.checked ? \"checked\" : undefined\n        }, [\"span\", {\n          contentEditable: false\n        }, input], [\"div\", 0]];\n      }\n    };\n  }\n\n  keys({\n    type\n  }) {\n    return {\n      Enter: prosemirror_schema_list_1.splitListItem(type),\n      Tab: prosemirror_schema_list_1.sinkListItem(type),\n      \"Shift-Tab\": prosemirror_schema_list_1.liftListItem(type),\n      \"Mod-]\": prosemirror_schema_list_1.sinkListItem(type),\n      \"Mod-[\": prosemirror_schema_list_1.liftListItem(type)\n    };\n  }\n\n  toMarkdown(state, node) {\n    state.write(node.attrs.checked ? \"[x] \" : \"[ ] \");\n    state.renderContent(node);\n  }\n\n  parseMarkdown() {\n    return {\n      block: \"checkbox_item\",\n      getAttrs: tok => ({\n        checked: tok.attrGet(\"checked\") ? true : undefined\n      })\n    };\n  }\n\n}\n\nexports.default = CheckboxItem;","map":{"version":3,"sources":["../../src/nodes/CheckboxItem.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,yBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAKA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,MAAqB,YAArB,SAA0C,MAAA,CAAA,OAA1C,CAA8C;AAA9C,EAAA,WAAA,GAAA;;;AAoDE,SAAA,YAAA,GAAe,KAAK,IAAG;AACrB,YAAM;AAAE,QAAA;AAAF,UAAW,KAAK,MAAtB;AACA,YAAM;AAAE,QAAA;AAAF,UAAS,IAAI,CAAC,KAApB;AACA,YAAM;AAAE,QAAA,GAAF;AAAO,QAAA;AAAP,UAAgB,KAAK,CAAC,MAAN,CAAa,qBAAb,EAAtB;AACA,YAAM,MAAM,GAAG,IAAI,CAAC,WAAL,CAAiB;AAAE,QAAA,GAAF;AAAO,QAAA;AAAP,OAAjB,CAAf;;AAEA,UAAI,MAAJ,EAAY;AACV,cAAM,WAAW,GAAG,EAAE,CAAC,aAAH,CAAiB,MAAM,CAAC,MAAxB,EAAgC,SAAhC,EAA2C;AAC7D,UAAA,OAAO,EAAE,KAAK,CAAC,MAAN,CAAa;AADuC,SAA3C,CAApB;AAGA,QAAA,IAAI,CAAC,QAAL,CAAc,WAAd;AACD;AACF,KAZD;AAqCD;;AAxFS,MAAJ,IAAI,GAAA;AACN,WAAO,eAAP;AACD;;AAES,MAAN,MAAM,GAAA;AACR,WAAO;AACL,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AACP,UAAA,OAAO,EAAE;AADF;AADJ,OADF;AAML,MAAA,OAAO,EAAE,kBANJ;AAOL,MAAA,QAAQ,EAAE,IAPL;AAQL,MAAA,SAAS,EAAE,IARN;AASL,MAAA,QAAQ,EAAE,CACR;AACE,QAAA,GAAG,EAAE,iBAAiB,KAAK,IAAI,IADjC;AAEE,QAAA,QAAQ,EAAG,GAAD,KAAyB;AACjC,UAAA,OAAO,EAAE,GAAG,CAAC,SAAJ,CAAc,QAAd,CAAuB,SAAvB;AADwB,SAAzB;AAFZ,OADQ,CATL;AAiBL,MAAA,KAAK,EAAE,IAAI,IAAG;AACZ,cAAM,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAd;AACA,QAAA,KAAK,CAAC,IAAN,GAAa,UAAb;AACA,QAAA,KAAK,CAAC,QAAN,GAAiB,CAAC,CAAlB;AACA,QAAA,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,KAAK,YAAtC;;AAEA,YAAI,IAAI,CAAC,KAAL,CAAW,OAAf,EAAwB;AACtB,UAAA,KAAK,CAAC,OAAN,GAAgB,IAAhB;AACD;;AAED,eAAO,CACL,IADK,EAEL;AACE,uBAAa,KAAK,IADpB;AAEE,UAAA,KAAK,EAAE,IAAI,CAAC,KAAL,CAAW,OAAX,GAAqB,SAArB,GAAiC;AAF1C,SAFK,EAML,CACE,MADF,EAEE;AACE,UAAA,eAAe,EAAE;AADnB,SAFF,EAKE,KALF,CANK,EAaL,CAAC,KAAD,EAAQ,CAAR,CAbK,CAAP;AAeD;AA1CI,KAAP;AA4CD;;AAgBD,EAAA,IAAI,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AACX,WAAO;AACL,MAAA,KAAK,EAAE,yBAAA,CAAA,aAAA,CAAc,IAAd,CADF;AAEL,MAAA,GAAG,EAAE,yBAAA,CAAA,YAAA,CAAa,IAAb,CAFA;AAGL,mBAAa,yBAAA,CAAA,YAAA,CAAa,IAAb,CAHR;AAIL,eAAS,yBAAA,CAAA,YAAA,CAAa,IAAb,CAJJ;AAKL,eAAS,yBAAA,CAAA,YAAA,CAAa,IAAb;AALJ,KAAP;AAOD;;AAED,EAAA,UAAU,CAAC,KAAD,EAAQ,IAAR,EAAY;AACpB,IAAA,KAAK,CAAC,KAAN,CAAY,IAAI,CAAC,KAAL,CAAW,OAAX,GAAqB,MAArB,GAA8B,MAA1C;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,IAApB;AACD;;AAED,EAAA,aAAa,GAAA;AACX,WAAO;AACL,MAAA,KAAK,EAAE,eADF;AAEL,MAAA,QAAQ,EAAE,GAAG,KAAK;AAChB,QAAA,OAAO,EAAE,GAAG,CAAC,OAAJ,CAAY,SAAZ,IAAyB,IAAzB,GAAgC;AADzB,OAAL;AAFR,KAAP;AAMD;;AAxF2C;;AAA9C,OAAA,CAAA,OAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_schema_list_1 = require(\"prosemirror-schema-list\");\nconst Node_1 = __importDefault(require(\"./Node\"));\nclass CheckboxItem extends Node_1.default {\n    constructor() {\n        super(...arguments);\n        this.handleChange = event => {\n            const { view } = this.editor;\n            const { tr } = view.state;\n            const { top, left } = event.target.getBoundingClientRect();\n            const result = view.posAtCoords({ top, left });\n            if (result) {\n                const transaction = tr.setNodeMarkup(result.inside, undefined, {\n                    checked: event.target.checked,\n                });\n                view.dispatch(transaction);\n            }\n        };\n    }\n    get name() {\n        return \"checkbox_item\";\n    }\n    get schema() {\n        return {\n            attrs: {\n                checked: {\n                    default: false,\n                },\n            },\n            content: \"paragraph block*\",\n            defining: true,\n            draggable: true,\n            parseDOM: [\n                {\n                    tag: `li[data-type=\"${this.name}\"]`,\n                    getAttrs: (dom) => ({\n                        checked: dom.className.includes(\"checked\"),\n                    }),\n                },\n            ],\n            toDOM: node => {\n                const input = document.createElement(\"input\");\n                input.type = \"checkbox\";\n                input.tabIndex = -1;\n                input.addEventListener(\"change\", this.handleChange);\n                if (node.attrs.checked) {\n                    input.checked = true;\n                }\n                return [\n                    \"li\",\n                    {\n                        \"data-type\": this.name,\n                        class: node.attrs.checked ? \"checked\" : undefined,\n                    },\n                    [\n                        \"span\",\n                        {\n                            contentEditable: false,\n                        },\n                        input,\n                    ],\n                    [\"div\", 0],\n                ];\n            },\n        };\n    }\n    keys({ type }) {\n        return {\n            Enter: prosemirror_schema_list_1.splitListItem(type),\n            Tab: prosemirror_schema_list_1.sinkListItem(type),\n            \"Shift-Tab\": prosemirror_schema_list_1.liftListItem(type),\n            \"Mod-]\": prosemirror_schema_list_1.sinkListItem(type),\n            \"Mod-[\": prosemirror_schema_list_1.liftListItem(type),\n        };\n    }\n    toMarkdown(state, node) {\n        state.write(node.attrs.checked ? \"[x] \" : \"[ ] \");\n        state.renderContent(node);\n    }\n    parseMarkdown() {\n        return {\n            block: \"checkbox_item\",\n            getAttrs: tok => ({\n                checked: tok.attrGet(\"checked\") ? true : undefined,\n            }),\n        };\n    }\n}\nexports.default = CheckboxItem;\n//# sourceMappingURL=CheckboxItem.js.map"]},"metadata":{},"sourceType":"script"}