{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_schema_list_1 = require(\"prosemirror-schema-list\");\n\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\n\nconst isList_1 = __importDefault(require(\"../queries/isList\"));\n\nfunction toggleList(listType, itemType) {\n  return (state, dispatch) => {\n    const {\n      schema,\n      selection\n    } = state;\n    const {\n      $from,\n      $to\n    } = selection;\n    const range = $from.blockRange($to);\n\n    if (!range) {\n      return false;\n    }\n\n    const parentList = prosemirror_utils_1.findParentNode(node => isList_1.default(node, schema))(selection);\n\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n      if (parentList.node.type === listType) {\n        return prosemirror_schema_list_1.liftListItem(itemType)(state, dispatch);\n      }\n\n      if (isList_1.default(parentList.node, schema) && listType.validContent(parentList.node.content)) {\n        const {\n          tr\n        } = state;\n        tr.setNodeMarkup(parentList.pos, listType);\n\n        if (dispatch) {\n          dispatch(tr);\n        }\n\n        return false;\n      }\n    }\n\n    return prosemirror_schema_list_1.wrapInList(listType)(state, dispatch);\n  };\n}\n\nexports.default = toggleList;","map":{"version":3,"sources":["../../src/commands/toggleList.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAA,yBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AAEA,SAAwB,UAAxB,CAAmC,QAAnC,EAAuD,QAAvD,EAAyE;AACvE,SAAO,CAAC,KAAD,EAAqB,QAArB,KAA4D;AACjE,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAwB,KAA9B;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAiB,SAAvB;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAAd;;AAEA,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,KAAP;AACD;;AAED,UAAM,UAAU,GAAG,mBAAA,CAAA,cAAA,CAAe,IAAI,IAAI,QAAA,CAAA,OAAA,CAAO,IAAP,EAAa,MAAb,CAAvB,EAA6C,SAA7C,CAAnB;;AAEA,QAAI,KAAK,CAAC,KAAN,IAAe,CAAf,IAAoB,UAApB,IAAkC,KAAK,CAAC,KAAN,GAAc,UAAU,CAAC,KAAzB,IAAkC,CAAxE,EAA2E;AACzE,UAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,KAAyB,QAA7B,EAAuC;AACrC,eAAO,yBAAA,CAAA,YAAA,CAAa,QAAb,EAAuB,KAAvB,EAA8B,QAA9B,CAAP;AACD;;AAED,UACE,QAAA,CAAA,OAAA,CAAO,UAAU,CAAC,IAAlB,EAAwB,MAAxB,KACA,QAAQ,CAAC,YAAT,CAAsB,UAAU,CAAC,IAAX,CAAgB,OAAtC,CAFF,EAGE;AACA,cAAM;AAAE,UAAA;AAAF,YAAS,KAAf;AACA,QAAA,EAAE,CAAC,aAAH,CAAiB,UAAU,CAAC,GAA5B,EAAiC,QAAjC;;AAEA,YAAI,QAAJ,EAAc;AACZ,UAAA,QAAQ,CAAC,EAAD,CAAR;AACD;;AAED,eAAO,KAAP;AACD;AACF;;AAED,WAAO,yBAAA,CAAA,UAAA,CAAW,QAAX,EAAqB,KAArB,EAA4B,QAA5B,CAAP;AACD,GAhCD;AAiCD;;AAlCD,OAAA,CAAA,OAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_schema_list_1 = require(\"prosemirror-schema-list\");\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\nconst isList_1 = __importDefault(require(\"../queries/isList\"));\nfunction toggleList(listType, itemType) {\n    return (state, dispatch) => {\n        const { schema, selection } = state;\n        const { $from, $to } = selection;\n        const range = $from.blockRange($to);\n        if (!range) {\n            return false;\n        }\n        const parentList = prosemirror_utils_1.findParentNode(node => isList_1.default(node, schema))(selection);\n        if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n            if (parentList.node.type === listType) {\n                return prosemirror_schema_list_1.liftListItem(itemType)(state, dispatch);\n            }\n            if (isList_1.default(parentList.node, schema) &&\n                listType.validContent(parentList.node.content)) {\n                const { tr } = state;\n                tr.setNodeMarkup(parentList.pos, listType);\n                if (dispatch) {\n                    dispatch(tr);\n                }\n                return false;\n            }\n        }\n        return prosemirror_schema_list_1.wrapInList(listType)(state, dispatch);\n    };\n}\nexports.default = toggleList;\n//# sourceMappingURL=toggleList.js.map"]},"metadata":{},"sourceType":"script"}