{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/Portfolio/personal-blog/client/src/context/AuthContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useMemo, createContext } from 'react';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  authService,\n  children\n}) => {\n  _s();\n\n  const [user, setUser] = useState(undefined);\n  console.log(\"AuthContext\"); //이게 계속 돌아가면서 앱을 랜더링시킴.\n  // useEffect(() => {\n  //   authService\n  //     .me()\n  //     .then((data) => setUser(data))\n  //     .catch(console.error);\n  // }, [authService, user]);\n\n  const onLogin = useCallback(async (username, password) => {\n    authService.login(username, password).then(data => setUser(data));\n  }, [authService]);\n  const onLogout = useCallback(async () => {\n    authService.logout().then(() => setUser(undefined));\n  }, [authService]);\n  const context = useMemo(() => ({\n    user,\n    onLogin,\n    onLogout\n  }), [user, onLogin, onLogout]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"/XVe3ojtBXJnSV39/0W/8OHBDHc=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/context/AuthContext.jsx"],"names":["React","useState","useEffect","useCallback","useMemo","createContext","useContext","AuthContext","AuthProvider","authService","children","user","setUser","undefined","console","log","onLogin","username","password","login","then","data","onLogout","logout","context","useAuth"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,OAAlD,EAA2DC,aAA3D,QAAgF,OAAhF;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,MAAMG,YAAY,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAD,KAA6B;AAAA;;AACvD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAACY,SAAD,CAAhC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAHuD,CAKvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,OAAO,GAAGb,WAAW,CAAC,OAAOc,QAAP,EAAiBC,QAAjB,KAA8B;AACxDT,IAAAA,WAAW,CACRU,KADH,CACSF,QADT,EACmBC,QADnB,EAEGE,IAFH,CAESC,IAAD,IAAUT,OAAO,CAACS,IAAD,CAFzB;AAGD,GAJ0B,EAIxB,CAACZ,WAAD,CAJwB,CAA3B;AAMA,QAAMa,QAAQ,GAAGnB,WAAW,CAAC,YAAY;AACvCM,IAAAA,WAAW,CACRc,MADH,GAEGH,IAFH,CAEQ,MAAMR,OAAO,CAACC,SAAD,CAFrB;AAGD,GAJ2B,EAIzB,CAACJ,WAAD,CAJyB,CAA5B;AAMA,QAAMe,OAAO,GAAGpB,OAAO,CAAC,OAAO;AAC7BO,IAAAA,IAD6B;AACvBK,IAAAA,OADuB;AACdM,IAAAA;AADc,GAAP,CAAD,EAEnB,CAACX,IAAD,EAAOK,OAAP,EAAgBM,QAAhB,CAFmB,CAAvB;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,OAA7B;AAAA,cACGd;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlCM;;GAAMF,Y;;KAAAA,Y;AAoCb,OAAO,MAAMiB,OAAO,GAAG;AAAA;;AAAA,SAAMnB,UAAU,CAACC,WAAD,CAAhB;AAAA,CAAhB;;IAAMkB,O","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, createContext } from 'react';\nimport { useContext } from 'react';\n\nexport const AuthContext = createContext({});\n\nexport const AuthProvider = ({authService, children}) => {\n  const [user, setUser] = useState(undefined);\n\n  console.log(\"AuthContext\")\n\n  //이게 계속 돌아가면서 앱을 랜더링시킴.\n  // useEffect(() => {\n  //   authService\n  //     .me()\n  //     .then((data) => setUser(data))\n  //     .catch(console.error);\n  // }, [authService, user]);\n\n  const onLogin = useCallback(async (username, password) => {\n    authService\n      .login(username, password)\n      .then((data) => setUser(data));\n  }, [authService])\n\n  const onLogout = useCallback(async () => {\n    authService\n      .logout()\n      .then(() => setUser(undefined));\n  }, [authService])\n\n  const context = useMemo(() => ({\n    user, onLogin, onLogout\n  }), [user, onLogin, onLogout])\n\n  return (\n    <AuthContext.Provider value={context}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => useContext(AuthContext);"]},"metadata":{},"sourceType":"module"}