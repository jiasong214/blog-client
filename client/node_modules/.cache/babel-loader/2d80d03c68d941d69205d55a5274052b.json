{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LANGUAGES = void 0;\n\nconst core_1 = __importDefault(require(\"refractor/core\"));\n\nconst flattenDeep_1 = __importDefault(require(\"lodash/flattenDeep\"));\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst prosemirror_view_1 = require(\"prosemirror-view\");\n\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\n\nexports.LANGUAGES = {\n  none: \"None\",\n  bash: \"Bash\",\n  css: \"CSS\",\n  clike: \"C\",\n  csharp: \"C#\",\n  go: \"Go\",\n  markup: \"HTML\",\n  java: \"Java\",\n  javascript: \"JavaScript\",\n  json: \"JSON\",\n  php: \"PHP\",\n  powershell: \"Powershell\",\n  python: \"Python\",\n  ruby: \"Ruby\",\n  sql: \"SQL\",\n  typescript: \"TypeScript\",\n  yaml: \"YAML\"\n};\nconst cache = {};\n\nfunction getDecorations({\n  doc,\n  name\n}) {\n  const decorations = [];\n  const blocks = prosemirror_utils_1.findBlockNodes(doc).filter(item => item.node.type.name === name);\n\n  function parseNodes(nodes, classNames = []) {\n    return nodes.map(node => {\n      if (node.type === \"element\") {\n        const classes = [...classNames, ...(node.properties.className || [])];\n        return parseNodes(node.children, classes);\n      }\n\n      return {\n        text: node.value,\n        classes: classNames\n      };\n    });\n  }\n\n  blocks.forEach(block => {\n    let startPos = block.pos + 1;\n    const language = block.node.attrs.language;\n\n    if (!language || language === \"none\" || !core_1.default.registered(language)) {\n      return;\n    }\n\n    if (!cache[block.pos] || !cache[block.pos].node.eq(block.node)) {\n      const nodes = core_1.default.highlight(block.node.textContent, language);\n\n      const _decorations = flattenDeep_1.default(parseNodes(nodes)).map(node => {\n        const from = startPos;\n        const to = from + node.text.length;\n        startPos = to;\n        return Object.assign(Object.assign({}, node), {\n          from,\n          to\n        });\n      }).filter(node => node.classes && node.classes.length).map(node => prosemirror_view_1.Decoration.inline(node.from, node.to, {\n        class: node.classes.join(\" \")\n      }));\n\n      cache[block.pos] = {\n        node: block.node,\n        decorations: _decorations\n      };\n    }\n\n    cache[block.pos].decorations.forEach(decoration => {\n      decorations.push(decoration);\n    });\n  });\n  Object.keys(cache).filter(pos => !blocks.find(block => block.pos === Number(pos))).forEach(pos => {\n    delete cache[Number(pos)];\n  });\n  return prosemirror_view_1.DecorationSet.create(doc, decorations);\n}\n\nfunction Prism({\n  name\n}) {\n  let highlighted = false;\n  return new prosemirror_state_1.Plugin({\n    key: new prosemirror_state_1.PluginKey(\"prism\"),\n    state: {\n      init: (_, {\n        doc\n      }) => {\n        return prosemirror_view_1.DecorationSet.create(doc, []);\n      },\n      apply: (transaction, decorationSet, oldState, state) => {\n        const nodeName = state.selection.$head.parent.type.name;\n        const previousNodeName = oldState.selection.$head.parent.type.name;\n        const codeBlockChanged = transaction.docChanged && [nodeName, previousNodeName].includes(name);\n\n        if (!highlighted || codeBlockChanged) {\n          highlighted = true;\n          return getDecorations({\n            doc: transaction.doc,\n            name\n          });\n        }\n\n        return decorationSet.map(transaction.mapping, transaction.doc);\n      }\n    },\n    view: view => {\n      if (!highlighted) {\n        setTimeout(() => {\n          view.dispatch(view.state.tr.setMeta(\"prism\", {\n            loaded: true\n          }));\n        }, 10);\n      }\n\n      return {};\n    },\n    props: {\n      decorations(state) {\n        return this.getState(state);\n      }\n\n    }\n  });\n}\n\nexports.default = Prism;","map":{"version":3,"sources":["../../src/plugins/Prism.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,MAAA,aAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,kBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEa,OAAA,CAAA,SAAA,GAAY;AACvB,EAAA,IAAI,EAAE,MADiB;AAEvB,EAAA,IAAI,EAAE,MAFiB;AAGvB,EAAA,GAAG,EAAE,KAHkB;AAIvB,EAAA,KAAK,EAAE,GAJgB;AAKvB,EAAA,MAAM,EAAE,IALe;AAMvB,EAAA,EAAE,EAAE,IANmB;AAOvB,EAAA,MAAM,EAAE,MAPe;AAQvB,EAAA,IAAI,EAAE,MARiB;AASvB,EAAA,UAAU,EAAE,YATW;AAUvB,EAAA,IAAI,EAAE,MAViB;AAWvB,EAAA,GAAG,EAAE,KAXkB;AAYvB,EAAA,UAAU,EAAE,YAZW;AAavB,EAAA,MAAM,EAAE,QAbe;AAcvB,EAAA,IAAI,EAAE,MAdiB;AAevB,EAAA,GAAG,EAAE,KAfkB;AAgBvB,EAAA,UAAU,EAAE,YAhBW;AAiBvB,EAAA,IAAI,EAAE;AAjBiB,CAAZ;AAyBb,MAAM,KAAK,GAA8D,EAAzE;;AAEA,SAAS,cAAT,CAAwB;AAAE,EAAA,GAAF;AAAO,EAAA;AAAP,CAAxB,EAAkE;AAChE,QAAM,WAAW,GAAiB,EAAlC;AACA,QAAM,MAAM,GAAkC,mBAAA,CAAA,cAAA,CAAe,GAAf,EAAoB,MAApB,CAC5C,IAAI,IAAI,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,IAAf,KAAwB,IADY,CAA9C;;AAIA,WAAS,UAAT,CACE,KADF,EAEE,UAAA,GAAuB,EAFzB,EAE2B;AAEzB,WAAO,KAAK,CAAC,GAAN,CAAU,IAAI,IAAG;AACtB,UAAI,IAAI,CAAC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,cAAM,OAAO,GAAG,CAAC,GAAG,UAAJ,EAAgB,IAAI,IAAI,CAAC,UAAL,CAAgB,SAAhB,IAA6B,EAAjC,CAAhB,CAAhB;AACA,eAAO,UAAU,CAAC,IAAI,CAAC,QAAN,EAAgB,OAAhB,CAAjB;AACD;;AAED,aAAO;AACL,QAAA,IAAI,EAAE,IAAI,CAAC,KADN;AAEL,QAAA,OAAO,EAAE;AAFJ,OAAP;AAID,KAVM,CAAP;AAWD;;AAED,EAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAG;AACrB,QAAI,QAAQ,GAAG,KAAK,CAAC,GAAN,GAAY,CAA3B;AACA,UAAM,QAAQ,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAiB,QAAlC;;AACA,QAAI,CAAC,QAAD,IAAa,QAAQ,KAAK,MAA1B,IAAoC,CAAC,MAAA,CAAA,OAAA,CAAU,UAAV,CAAqB,QAArB,CAAzC,EAAyE;AACvE;AACD;;AAED,QAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAP,CAAN,IAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,GAAP,CAAL,CAAiB,IAAjB,CAAsB,EAAtB,CAAyB,KAAK,CAAC,IAA/B,CAA1B,EAAgE;AAC9D,YAAM,KAAK,GAAG,MAAA,CAAA,OAAA,CAAU,SAAV,CAAoB,KAAK,CAAC,IAAN,CAAW,WAA/B,EAA4C,QAA5C,CAAd;;AACA,YAAM,YAAY,GAAG,aAAA,CAAA,OAAA,CAAY,UAAU,CAAC,KAAD,CAAtB,EAClB,GADkB,CACb,IAAD,IAAqB;AACxB,cAAM,IAAI,GAAG,QAAb;AACA,cAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,MAA5B;AAEA,QAAA,QAAQ,GAAG,EAAX;AAEA,eAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,UAAA,IADO;AAEP,UAAA;AAFO,SADT,CAAA;AAKD,OAZkB,EAalB,MAbkB,CAaX,IAAI,IAAI,IAAI,CAAC,OAAL,IAAgB,IAAI,CAAC,OAAL,CAAa,MAb1B,EAclB,GAdkB,CAcd,IAAI,IACP,kBAAA,CAAA,UAAA,CAAW,MAAX,CAAkB,IAAI,CAAC,IAAvB,EAA6B,IAAI,CAAC,EAAlC,EAAsC;AACpC,QAAA,KAAK,EAAE,IAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB;AAD6B,OAAtC,CAfiB,CAArB;;AAoBA,MAAA,KAAK,CAAC,KAAK,CAAC,GAAP,CAAL,GAAmB;AACjB,QAAA,IAAI,EAAE,KAAK,CAAC,IADK;AAEjB,QAAA,WAAW,EAAE;AAFI,OAAnB;AAID;;AACD,IAAA,KAAK,CAAC,KAAK,CAAC,GAAP,CAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAqC,UAAU,IAAG;AAChD,MAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB;AACD,KAFD;AAGD,GArCD;AAuCA,EAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EACG,MADH,CACU,GAAG,IAAI,CAAC,MAAM,CAAC,IAAP,CAAY,KAAK,IAAI,KAAK,CAAC,GAAN,KAAc,MAAM,CAAC,GAAD,CAAzC,CADlB,EAEG,OAFH,CAEW,GAAG,IAAG;AACb,WAAO,KAAK,CAAC,MAAM,CAAC,GAAD,CAAP,CAAZ;AACD,GAJH;AAMA,SAAO,kBAAA,CAAA,aAAA,CAAc,MAAd,CAAqB,GAArB,EAA0B,WAA1B,CAAP;AACD;;AAED,SAAwB,KAAxB,CAA8B;AAAE,EAAA;AAAF,CAA9B,EAAsC;AACpC,MAAI,WAAW,GAAG,KAAlB;AAEA,SAAO,IAAI,mBAAA,CAAA,MAAJ,CAAW;AAChB,IAAA,GAAG,EAAE,IAAI,mBAAA,CAAA,SAAJ,CAAc,OAAd,CADW;AAEhB,IAAA,KAAK,EAAE;AACL,MAAA,IAAI,EAAE,CAAC,CAAD,EAAY;AAAE,QAAA;AAAF,OAAZ,KAAuB;AAC3B,eAAO,kBAAA,CAAA,aAAA,CAAc,MAAd,CAAqB,GAArB,EAA0B,EAA1B,CAAP;AACD,OAHI;AAIL,MAAA,KAAK,EAAE,CAAC,WAAD,EAAc,aAAd,EAA6B,QAA7B,EAAuC,KAAvC,KAAgD;AACrD,cAAM,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,IAA7B,CAAkC,IAAnD;AACA,cAAM,gBAAgB,GAAG,QAAQ,CAAC,SAAT,CAAmB,KAAnB,CAAyB,MAAzB,CAAgC,IAAhC,CAAqC,IAA9D;AACA,cAAM,gBAAgB,GACpB,WAAW,CAAC,UAAZ,IAA0B,CAAC,QAAD,EAAW,gBAAX,EAA6B,QAA7B,CAAsC,IAAtC,CAD5B;;AAGA,YAAI,CAAC,WAAD,IAAgB,gBAApB,EAAsC;AACpC,UAAA,WAAW,GAAG,IAAd;AACA,iBAAO,cAAc,CAAC;AAAE,YAAA,GAAG,EAAE,WAAW,CAAC,GAAnB;AAAwB,YAAA;AAAxB,WAAD,CAArB;AACD;;AAED,eAAO,aAAa,CAAC,GAAd,CAAkB,WAAW,CAAC,OAA9B,EAAuC,WAAW,CAAC,GAAnD,CAAP;AACD;AAhBI,KAFS;AAoBhB,IAAA,IAAI,EAAE,IAAI,IAAG;AACX,UAAI,CAAC,WAAL,EAAkB;AAKhB,QAAA,UAAU,CAAC,MAAK;AACd,UAAA,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,KAAL,CAAW,EAAX,CAAc,OAAd,CAAsB,OAAtB,EAA+B;AAAE,YAAA,MAAM,EAAE;AAAV,WAA/B,CAAd;AACD,SAFS,EAEP,EAFO,CAAV;AAGD;;AACD,aAAO,EAAP;AACD,KA/Be;AAgChB,IAAA,KAAK,EAAE;AACL,MAAA,WAAW,CAAC,KAAD,EAAM;AACf,eAAO,KAAK,QAAL,CAAc,KAAd,CAAP;AACD;;AAHI;AAhCS,GAAX,CAAP;AAsCD;;AAzCD,OAAA,CAAA,OAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LANGUAGES = void 0;\nconst core_1 = __importDefault(require(\"refractor/core\"));\nconst flattenDeep_1 = __importDefault(require(\"lodash/flattenDeep\"));\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst prosemirror_view_1 = require(\"prosemirror-view\");\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\nexports.LANGUAGES = {\n    none: \"None\",\n    bash: \"Bash\",\n    css: \"CSS\",\n    clike: \"C\",\n    csharp: \"C#\",\n    go: \"Go\",\n    markup: \"HTML\",\n    java: \"Java\",\n    javascript: \"JavaScript\",\n    json: \"JSON\",\n    php: \"PHP\",\n    powershell: \"Powershell\",\n    python: \"Python\",\n    ruby: \"Ruby\",\n    sql: \"SQL\",\n    typescript: \"TypeScript\",\n    yaml: \"YAML\",\n};\nconst cache = {};\nfunction getDecorations({ doc, name }) {\n    const decorations = [];\n    const blocks = prosemirror_utils_1.findBlockNodes(doc).filter(item => item.node.type.name === name);\n    function parseNodes(nodes, classNames = []) {\n        return nodes.map(node => {\n            if (node.type === \"element\") {\n                const classes = [...classNames, ...(node.properties.className || [])];\n                return parseNodes(node.children, classes);\n            }\n            return {\n                text: node.value,\n                classes: classNames,\n            };\n        });\n    }\n    blocks.forEach(block => {\n        let startPos = block.pos + 1;\n        const language = block.node.attrs.language;\n        if (!language || language === \"none\" || !core_1.default.registered(language)) {\n            return;\n        }\n        if (!cache[block.pos] || !cache[block.pos].node.eq(block.node)) {\n            const nodes = core_1.default.highlight(block.node.textContent, language);\n            const _decorations = flattenDeep_1.default(parseNodes(nodes))\n                .map((node) => {\n                const from = startPos;\n                const to = from + node.text.length;\n                startPos = to;\n                return Object.assign(Object.assign({}, node), { from,\n                    to });\n            })\n                .filter(node => node.classes && node.classes.length)\n                .map(node => prosemirror_view_1.Decoration.inline(node.from, node.to, {\n                class: node.classes.join(\" \"),\n            }));\n            cache[block.pos] = {\n                node: block.node,\n                decorations: _decorations,\n            };\n        }\n        cache[block.pos].decorations.forEach(decoration => {\n            decorations.push(decoration);\n        });\n    });\n    Object.keys(cache)\n        .filter(pos => !blocks.find(block => block.pos === Number(pos)))\n        .forEach(pos => {\n        delete cache[Number(pos)];\n    });\n    return prosemirror_view_1.DecorationSet.create(doc, decorations);\n}\nfunction Prism({ name }) {\n    let highlighted = false;\n    return new prosemirror_state_1.Plugin({\n        key: new prosemirror_state_1.PluginKey(\"prism\"),\n        state: {\n            init: (_, { doc }) => {\n                return prosemirror_view_1.DecorationSet.create(doc, []);\n            },\n            apply: (transaction, decorationSet, oldState, state) => {\n                const nodeName = state.selection.$head.parent.type.name;\n                const previousNodeName = oldState.selection.$head.parent.type.name;\n                const codeBlockChanged = transaction.docChanged && [nodeName, previousNodeName].includes(name);\n                if (!highlighted || codeBlockChanged) {\n                    highlighted = true;\n                    return getDecorations({ doc: transaction.doc, name });\n                }\n                return decorationSet.map(transaction.mapping, transaction.doc);\n            },\n        },\n        view: view => {\n            if (!highlighted) {\n                setTimeout(() => {\n                    view.dispatch(view.state.tr.setMeta(\"prism\", { loaded: true }));\n                }, 10);\n            }\n            return {};\n        },\n        props: {\n            decorations(state) {\n                return this.getState(state);\n            },\n        },\n    });\n}\nexports.default = Prism;\n//# sourceMappingURL=Prism.js.map"]},"metadata":{},"sourceType":"script"}