{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst CHECKBOX_REGEX = /\\[(X|\\s|_|-)\\]\\s(.*)?/i;\n\nfunction matches(token) {\n  return token && token.content.match(CHECKBOX_REGEX);\n}\n\nfunction isInline(token) {\n  return !!token && token.type === \"inline\";\n}\n\nfunction isParagraph(token) {\n  return !!token && token.type === \"paragraph_open\";\n}\n\nfunction isListItem(token) {\n  return !!token && (token.type === \"list_item_open\" || token.type === \"checkbox_item_open\");\n}\n\nfunction looksLikeChecklist(tokens, index) {\n  return isInline(tokens[index]) && isListItem(tokens[index - 2]) && isParagraph(tokens[index - 1]) && matches(tokens[index]);\n}\n\nfunction markdownItCheckbox(md) {\n  function render(tokens, idx) {\n    const token = tokens[idx];\n    const checked = !!token.attrGet(\"checked\");\n\n    if (token.nesting === 1) {\n      return `<li class=\"checkbox-list-item\"><span class=\"checkbox ${checked ? \"checked\" : \"\"}\">${checked ? \"[x]\" : \"[ ]\"}</span>`;\n    } else {\n      return \"</li>\\n\";\n    }\n  }\n\n  md.renderer.rules.checkbox_item_open = render;\n  md.renderer.rules.checkbox_item_close = render;\n  md.core.ruler.after(\"inline\", \"checkboxes\", state => {\n    const tokens = state.tokens;\n\n    for (let i = tokens.length - 1; i > 0; i--) {\n      const matches = looksLikeChecklist(tokens, i);\n\n      if (matches) {\n        const value = matches[1];\n        const checked = value.toLowerCase() === \"x\";\n\n        if (tokens[i - 3].type === \"bullet_list_open\") {\n          tokens[i - 3].type = \"checkbox_list_open\";\n        }\n\n        if (tokens[i + 3].type === \"bullet_list_close\") {\n          tokens[i + 3].type = \"checkbox_list_close\";\n        }\n\n        const tokenChildren = tokens[i].children;\n\n        if (tokenChildren) {\n          const contentMatches = tokenChildren[0].content.match(CHECKBOX_REGEX);\n\n          if (contentMatches) {\n            const label = contentMatches[2];\n            tokens[i].content = label;\n            tokenChildren[0].content = label;\n          }\n        }\n\n        tokens[i - 2].type = \"checkbox_item_open\";\n\n        if (checked === true) {\n          tokens[i - 2].attrs = [[\"checked\", \"true\"]];\n        }\n\n        let j = i;\n\n        while (tokens[j].type !== \"list_item_close\") {\n          j++;\n        }\n\n        tokens[j].type = \"checkbox_item_close\";\n      }\n    }\n\n    return false;\n  });\n}\n\nexports.default = markdownItCheckbox;","map":{"version":3,"sources":["../../../src/lib/markdown/checkboxes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CHECKBOX_REGEX = /\\[(X|\\s|_|-)\\]\\s(.*)?/i;\nfunction matches(token) {\n    return token && token.content.match(CHECKBOX_REGEX);\n}\nfunction isInline(token) {\n    return !!token && token.type === \"inline\";\n}\nfunction isParagraph(token) {\n    return !!token && token.type === \"paragraph_open\";\n}\nfunction isListItem(token) {\n    return (!!token &&\n        (token.type === \"list_item_open\" || token.type === \"checkbox_item_open\"));\n}\nfunction looksLikeChecklist(tokens, index) {\n    return (isInline(tokens[index]) &&\n        isListItem(tokens[index - 2]) &&\n        isParagraph(tokens[index - 1]) &&\n        matches(tokens[index]));\n}\nfunction markdownItCheckbox(md) {\n    function render(tokens, idx) {\n        const token = tokens[idx];\n        const checked = !!token.attrGet(\"checked\");\n        if (token.nesting === 1) {\n            return `<li class=\"checkbox-list-item\"><span class=\"checkbox ${checked ? \"checked\" : \"\"}\">${checked ? \"[x]\" : \"[ ]\"}</span>`;\n        }\n        else {\n            return \"</li>\\n\";\n        }\n    }\n    md.renderer.rules.checkbox_item_open = render;\n    md.renderer.rules.checkbox_item_close = render;\n    md.core.ruler.after(\"inline\", \"checkboxes\", state => {\n        const tokens = state.tokens;\n        for (let i = tokens.length - 1; i > 0; i--) {\n            const matches = looksLikeChecklist(tokens, i);\n            if (matches) {\n                const value = matches[1];\n                const checked = value.toLowerCase() === \"x\";\n                if (tokens[i - 3].type === \"bullet_list_open\") {\n                    tokens[i - 3].type = \"checkbox_list_open\";\n                }\n                if (tokens[i + 3].type === \"bullet_list_close\") {\n                    tokens[i + 3].type = \"checkbox_list_close\";\n                }\n                const tokenChildren = tokens[i].children;\n                if (tokenChildren) {\n                    const contentMatches = tokenChildren[0].content.match(CHECKBOX_REGEX);\n                    if (contentMatches) {\n                        const label = contentMatches[2];\n                        tokens[i].content = label;\n                        tokenChildren[0].content = label;\n                    }\n                }\n                tokens[i - 2].type = \"checkbox_item_open\";\n                if (checked === true) {\n                    tokens[i - 2].attrs = [[\"checked\", \"true\"]];\n                }\n                let j = i;\n                while (tokens[j].type !== \"list_item_close\") {\n                    j++;\n                }\n                tokens[j].type = \"checkbox_item_close\";\n            }\n        }\n        return false;\n    });\n}\nexports.default = markdownItCheckbox;\n//# sourceMappingURL=checkboxes.js.map"]},"metadata":{},"sourceType":"script"}