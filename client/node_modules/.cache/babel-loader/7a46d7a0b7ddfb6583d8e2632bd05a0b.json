{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nconst toggleWrap_1 = __importDefault(require(\"../commands/toggleWrap\"));\n\nconst isNodeActive_1 = __importDefault(require(\"../queries/isNodeActive\"));\n\nclass Blockquote extends Node_1.default {\n  get name() {\n    return \"blockquote\";\n  }\n\n  get schema() {\n    return {\n      content: \"block+\",\n      group: \"block\",\n      defining: true,\n      parseDOM: [{\n        tag: \"blockquote\"\n      }],\n      toDOM: () => [\"blockquote\", 0]\n    };\n  }\n\n  inputRules({\n    type\n  }) {\n    return [prosemirror_inputrules_1.wrappingInputRule(/^\\s*>\\s$/, type)];\n  }\n\n  commands({\n    type\n  }) {\n    return () => toggleWrap_1.default(type);\n  }\n\n  keys({\n    type\n  }) {\n    return {\n      \"Ctrl->\": toggleWrap_1.default(type),\n      \"Mod-]\": toggleWrap_1.default(type),\n      \"Shift-Enter\": (state, dispatch) => {\n        if (!isNodeActive_1.default(type)(state)) {\n          return false;\n        }\n\n        const {\n          tr,\n          selection\n        } = state;\n        dispatch(tr.split(selection.to));\n        return true;\n      }\n    };\n  }\n\n  toMarkdown(state, node) {\n    state.wrapBlock(\"> \", null, node, () => state.renderContent(node));\n  }\n\n  parseMarkdown() {\n    return {\n      block: \"blockquote\"\n    };\n  }\n\n}\n\nexports.default = Blockquote;","map":{"version":3,"sources":["../../src/nodes/Blockquote.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AAEA,MAAqB,UAArB,SAAwC,MAAA,CAAA,OAAxC,CAA4C;AAClC,MAAJ,IAAI,GAAA;AACN,WAAO,YAAP;AACD;;AAES,MAAN,MAAM,GAAA;AACR,WAAO;AACL,MAAA,OAAO,EAAE,QADJ;AAEL,MAAA,KAAK,EAAE,OAFF;AAGL,MAAA,QAAQ,EAAE,IAHL;AAIL,MAAA,QAAQ,EAAE,CAAC;AAAE,QAAA,GAAG,EAAE;AAAP,OAAD,CAJL;AAKL,MAAA,KAAK,EAAE,MAAM,CAAC,YAAD,EAAe,CAAf;AALR,KAAP;AAOD;;AAED,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AACjB,WAAO,CAAC,wBAAA,CAAA,iBAAA,CAAkB,UAAlB,EAA8B,IAA9B,CAAD,CAAP;AACD;;AAED,EAAA,QAAQ,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AACf,WAAO,MAAM,YAAA,CAAA,OAAA,CAAW,IAAX,CAAb;AACD;;AAED,EAAA,IAAI,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AACX,WAAO;AACL,gBAAU,YAAA,CAAA,OAAA,CAAW,IAAX,CADL;AAEL,eAAS,YAAA,CAAA,OAAA,CAAW,IAAX,CAFJ;AAGL,qBAAe,CAAC,KAAD,EAAQ,QAAR,KAAoB;AACjC,YAAI,CAAC,cAAA,CAAA,OAAA,CAAa,IAAb,EAAmB,KAAnB,CAAL,EAAgC;AAC9B,iBAAO,KAAP;AACD;;AAED,cAAM;AAAE,UAAA,EAAF;AAAM,UAAA;AAAN,YAAoB,KAA1B;AACA,QAAA,QAAQ,CAAC,EAAE,CAAC,KAAH,CAAS,SAAS,CAAC,EAAnB,CAAD,CAAR;AACA,eAAO,IAAP;AACD;AAXI,KAAP;AAaD;;AAED,EAAA,UAAU,CAAC,KAAD,EAAQ,IAAR,EAAY;AACpB,IAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,MAAM,KAAK,CAAC,aAAN,CAAoB,IAApB,CAAxC;AACD;;AAED,EAAA,aAAa,GAAA;AACX,WAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AA7CyC;;AAA5C,OAAA,CAAA,OAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\nconst Node_1 = __importDefault(require(\"./Node\"));\nconst toggleWrap_1 = __importDefault(require(\"../commands/toggleWrap\"));\nconst isNodeActive_1 = __importDefault(require(\"../queries/isNodeActive\"));\nclass Blockquote extends Node_1.default {\n    get name() {\n        return \"blockquote\";\n    }\n    get schema() {\n        return {\n            content: \"block+\",\n            group: \"block\",\n            defining: true,\n            parseDOM: [{ tag: \"blockquote\" }],\n            toDOM: () => [\"blockquote\", 0],\n        };\n    }\n    inputRules({ type }) {\n        return [prosemirror_inputrules_1.wrappingInputRule(/^\\s*>\\s$/, type)];\n    }\n    commands({ type }) {\n        return () => toggleWrap_1.default(type);\n    }\n    keys({ type }) {\n        return {\n            \"Ctrl->\": toggleWrap_1.default(type),\n            \"Mod-]\": toggleWrap_1.default(type),\n            \"Shift-Enter\": (state, dispatch) => {\n                if (!isNodeActive_1.default(type)(state)) {\n                    return false;\n                }\n                const { tr, selection } = state;\n                dispatch(tr.split(selection.to));\n                return true;\n            },\n        };\n    }\n    toMarkdown(state, node) {\n        state.wrapBlock(\"> \", null, node, () => state.renderContent(node));\n    }\n    parseMarkdown() {\n        return { block: \"blockquote\" };\n    }\n}\nexports.default = Blockquote;\n//# sourceMappingURL=Blockquote.js.map"]},"metadata":{},"sourceType":"script"}