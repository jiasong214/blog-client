{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst core_1 = __importDefault(require(\"refractor/core\"));\n\nconst bash_1 = __importDefault(require(\"refractor/lang/bash\"));\n\nconst css_1 = __importDefault(require(\"refractor/lang/css\"));\n\nconst clike_1 = __importDefault(require(\"refractor/lang/clike\"));\n\nconst csharp_1 = __importDefault(require(\"refractor/lang/csharp\"));\n\nconst go_1 = __importDefault(require(\"refractor/lang/go\"));\n\nconst java_1 = __importDefault(require(\"refractor/lang/java\"));\n\nconst javascript_1 = __importDefault(require(\"refractor/lang/javascript\"));\n\nconst json_1 = __importDefault(require(\"refractor/lang/json\"));\n\nconst markup_1 = __importDefault(require(\"refractor/lang/markup\"));\n\nconst php_1 = __importDefault(require(\"refractor/lang/php\"));\n\nconst python_1 = __importDefault(require(\"refractor/lang/python\"));\n\nconst powershell_1 = __importDefault(require(\"refractor/lang/powershell\"));\n\nconst ruby_1 = __importDefault(require(\"refractor/lang/ruby\"));\n\nconst sql_1 = __importDefault(require(\"refractor/lang/sql\"));\n\nconst typescript_1 = __importDefault(require(\"refractor/lang/typescript\"));\n\nconst yaml_1 = __importDefault(require(\"refractor/lang/yaml\"));\n\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\n\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\n\nconst copy_to_clipboard_1 = __importDefault(require(\"copy-to-clipboard\"));\n\nconst Prism_1 = __importStar(require(\"../plugins/Prism\"));\n\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nconst types_1 = require(\"../types\");\n\nconst PERSISTENCE_KEY = \"rme-code-language\";\nconst DEFAULT_LANGUAGE = \"javascript\";\n[bash_1.default, css_1.default, clike_1.default, csharp_1.default, go_1.default, java_1.default, javascript_1.default, json_1.default, markup_1.default, php_1.default, python_1.default, powershell_1.default, ruby_1.default, sql_1.default, typescript_1.default, yaml_1.default].forEach(core_1.default.register);\n\nclass CodeFence extends Node_1.default {\n  constructor() {\n    super(...arguments);\n\n    this.handleCopyToClipboard = event => {\n      const {\n        view\n      } = this.editor;\n      const element = event.target;\n      const {\n        top,\n        left\n      } = element.getBoundingClientRect();\n      const result = view.posAtCoords({\n        top,\n        left\n      });\n\n      if (result) {\n        const node = view.state.doc.nodeAt(result.pos);\n\n        if (node) {\n          copy_to_clipboard_1.default(node.textContent);\n\n          if (this.options.onShowToast) {\n            this.options.onShowToast(this.options.dictionary.codeCopied, types_1.ToastType.Info);\n          }\n        }\n      }\n    };\n\n    this.handleLanguageChange = event => {\n      const {\n        view\n      } = this.editor;\n      const {\n        tr\n      } = view.state;\n      const element = event.target;\n      const {\n        top,\n        left\n      } = element.getBoundingClientRect();\n      const result = view.posAtCoords({\n        top,\n        left\n      });\n\n      if (result) {\n        const language = element.value;\n        const transaction = tr.setNodeMarkup(result.inside, undefined, {\n          language\n        });\n        view.dispatch(transaction);\n        localStorage === null || localStorage === void 0 ? void 0 : localStorage.setItem(PERSISTENCE_KEY, language);\n      }\n    };\n  }\n\n  get languageOptions() {\n    return Object.entries(Prism_1.LANGUAGES);\n  }\n\n  get name() {\n    return \"code_fence\";\n  }\n\n  get schema() {\n    return {\n      attrs: {\n        language: {\n          default: DEFAULT_LANGUAGE\n        }\n      },\n      content: \"text*\",\n      marks: \"\",\n      group: \"block\",\n      code: true,\n      defining: true,\n      draggable: false,\n      parseDOM: [{\n        tag: \"pre\",\n        preserveWhitespace: \"full\"\n      }, {\n        tag: \".code-block\",\n        preserveWhitespace: \"full\",\n        contentElement: \"code\",\n        getAttrs: dom => {\n          return {\n            language: dom.dataset.language\n          };\n        }\n      }],\n      toDOM: node => {\n        const button = document.createElement(\"button\");\n        button.innerText = \"Copy\";\n        button.type = \"button\";\n        button.addEventListener(\"click\", this.handleCopyToClipboard);\n        const select = document.createElement(\"select\");\n        select.addEventListener(\"change\", this.handleLanguageChange);\n        this.languageOptions.forEach(([key, label]) => {\n          const option = document.createElement(\"option\");\n          const value = key === \"none\" ? \"\" : key;\n          option.value = value;\n          option.innerText = label;\n          option.selected = node.attrs.language === value;\n          select.appendChild(option);\n        });\n        return [\"div\", {\n          class: \"code-block\",\n          \"data-language\": node.attrs.language\n        }, [\"div\", {\n          contentEditable: false\n        }, select, button], [\"pre\", [\"code\", {\n          spellCheck: false\n        }, 0]]];\n      }\n    };\n  }\n\n  commands({\n    type\n  }) {\n    return () => prosemirror_commands_1.setBlockType(type, {\n      language: (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(PERSISTENCE_KEY)) || DEFAULT_LANGUAGE\n    });\n  }\n\n  keys({\n    type\n  }) {\n    return {\n      \"Shift-Ctrl-\\\\\": prosemirror_commands_1.setBlockType(type),\n      \"Shift-Enter\": (state, dispatch) => {\n        if (!isInCode_1.default(state)) return false;\n        const {\n          tr,\n          selection\n        } = state;\n        dispatch(tr.insertText(\"\\n\", selection.from, selection.to));\n        return true;\n      },\n      Tab: (state, dispatch) => {\n        if (!isInCode_1.default(state)) return false;\n        const {\n          tr,\n          selection\n        } = state;\n        dispatch(tr.insertText(\"  \", selection.from, selection.to));\n        return true;\n      }\n    };\n  }\n\n  get plugins() {\n    return [Prism_1.default({\n      name: this.name\n    })];\n  }\n\n  inputRules({\n    type\n  }) {\n    return [prosemirror_inputrules_1.textblockTypeInputRule(/^```$/, type)];\n  }\n\n  toMarkdown(state, node) {\n    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n    state.text(node.textContent, false);\n    state.ensureNewLine();\n    state.write(\"```\");\n    state.closeBlock(node);\n  }\n\n  get markdownToken() {\n    return \"fence\";\n  }\n\n  parseMarkdown() {\n    return {\n      block: \"code_block\",\n      getAttrs: tok => ({\n        language: tok.info\n      })\n    };\n  }\n\n}\n\nexports.default = CodeFence;","map":{"version":3,"sources":["../../src/nodes/CodeFence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __importDefault(require(\"refractor/core\"));\nconst bash_1 = __importDefault(require(\"refractor/lang/bash\"));\nconst css_1 = __importDefault(require(\"refractor/lang/css\"));\nconst clike_1 = __importDefault(require(\"refractor/lang/clike\"));\nconst csharp_1 = __importDefault(require(\"refractor/lang/csharp\"));\nconst go_1 = __importDefault(require(\"refractor/lang/go\"));\nconst java_1 = __importDefault(require(\"refractor/lang/java\"));\nconst javascript_1 = __importDefault(require(\"refractor/lang/javascript\"));\nconst json_1 = __importDefault(require(\"refractor/lang/json\"));\nconst markup_1 = __importDefault(require(\"refractor/lang/markup\"));\nconst php_1 = __importDefault(require(\"refractor/lang/php\"));\nconst python_1 = __importDefault(require(\"refractor/lang/python\"));\nconst powershell_1 = __importDefault(require(\"refractor/lang/powershell\"));\nconst ruby_1 = __importDefault(require(\"refractor/lang/ruby\"));\nconst sql_1 = __importDefault(require(\"refractor/lang/sql\"));\nconst typescript_1 = __importDefault(require(\"refractor/lang/typescript\"));\nconst yaml_1 = __importDefault(require(\"refractor/lang/yaml\"));\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\nconst copy_to_clipboard_1 = __importDefault(require(\"copy-to-clipboard\"));\nconst Prism_1 = __importStar(require(\"../plugins/Prism\"));\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\nconst Node_1 = __importDefault(require(\"./Node\"));\nconst types_1 = require(\"../types\");\nconst PERSISTENCE_KEY = \"rme-code-language\";\nconst DEFAULT_LANGUAGE = \"javascript\";\n[\n    bash_1.default,\n    css_1.default,\n    clike_1.default,\n    csharp_1.default,\n    go_1.default,\n    java_1.default,\n    javascript_1.default,\n    json_1.default,\n    markup_1.default,\n    php_1.default,\n    python_1.default,\n    powershell_1.default,\n    ruby_1.default,\n    sql_1.default,\n    typescript_1.default,\n    yaml_1.default,\n].forEach(core_1.default.register);\nclass CodeFence extends Node_1.default {\n    constructor() {\n        super(...arguments);\n        this.handleCopyToClipboard = event => {\n            const { view } = this.editor;\n            const element = event.target;\n            const { top, left } = element.getBoundingClientRect();\n            const result = view.posAtCoords({ top, left });\n            if (result) {\n                const node = view.state.doc.nodeAt(result.pos);\n                if (node) {\n                    copy_to_clipboard_1.default(node.textContent);\n                    if (this.options.onShowToast) {\n                        this.options.onShowToast(this.options.dictionary.codeCopied, types_1.ToastType.Info);\n                    }\n                }\n            }\n        };\n        this.handleLanguageChange = event => {\n            const { view } = this.editor;\n            const { tr } = view.state;\n            const element = event.target;\n            const { top, left } = element.getBoundingClientRect();\n            const result = view.posAtCoords({ top, left });\n            if (result) {\n                const language = element.value;\n                const transaction = tr.setNodeMarkup(result.inside, undefined, {\n                    language,\n                });\n                view.dispatch(transaction);\n                localStorage === null || localStorage === void 0 ? void 0 : localStorage.setItem(PERSISTENCE_KEY, language);\n            }\n        };\n    }\n    get languageOptions() {\n        return Object.entries(Prism_1.LANGUAGES);\n    }\n    get name() {\n        return \"code_fence\";\n    }\n    get schema() {\n        return {\n            attrs: {\n                language: {\n                    default: DEFAULT_LANGUAGE,\n                },\n            },\n            content: \"text*\",\n            marks: \"\",\n            group: \"block\",\n            code: true,\n            defining: true,\n            draggable: false,\n            parseDOM: [\n                { tag: \"pre\", preserveWhitespace: \"full\" },\n                {\n                    tag: \".code-block\",\n                    preserveWhitespace: \"full\",\n                    contentElement: \"code\",\n                    getAttrs: (dom) => {\n                        return {\n                            language: dom.dataset.language,\n                        };\n                    },\n                },\n            ],\n            toDOM: node => {\n                const button = document.createElement(\"button\");\n                button.innerText = \"Copy\";\n                button.type = \"button\";\n                button.addEventListener(\"click\", this.handleCopyToClipboard);\n                const select = document.createElement(\"select\");\n                select.addEventListener(\"change\", this.handleLanguageChange);\n                this.languageOptions.forEach(([key, label]) => {\n                    const option = document.createElement(\"option\");\n                    const value = key === \"none\" ? \"\" : key;\n                    option.value = value;\n                    option.innerText = label;\n                    option.selected = node.attrs.language === value;\n                    select.appendChild(option);\n                });\n                return [\n                    \"div\",\n                    { class: \"code-block\", \"data-language\": node.attrs.language },\n                    [\"div\", { contentEditable: false }, select, button],\n                    [\"pre\", [\"code\", { spellCheck: false }, 0]],\n                ];\n            },\n        };\n    }\n    commands({ type }) {\n        return () => prosemirror_commands_1.setBlockType(type, {\n            language: (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(PERSISTENCE_KEY)) || DEFAULT_LANGUAGE,\n        });\n    }\n    keys({ type }) {\n        return {\n            \"Shift-Ctrl-\\\\\": prosemirror_commands_1.setBlockType(type),\n            \"Shift-Enter\": (state, dispatch) => {\n                if (!isInCode_1.default(state))\n                    return false;\n                const { tr, selection } = state;\n                dispatch(tr.insertText(\"\\n\", selection.from, selection.to));\n                return true;\n            },\n            Tab: (state, dispatch) => {\n                if (!isInCode_1.default(state))\n                    return false;\n                const { tr, selection } = state;\n                dispatch(tr.insertText(\"  \", selection.from, selection.to));\n                return true;\n            },\n        };\n    }\n    get plugins() {\n        return [Prism_1.default({ name: this.name })];\n    }\n    inputRules({ type }) {\n        return [prosemirror_inputrules_1.textblockTypeInputRule(/^```$/, type)];\n    }\n    toMarkdown(state, node) {\n        state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n        state.text(node.textContent, false);\n        state.ensureNewLine();\n        state.write(\"```\");\n        state.closeBlock(node);\n    }\n    get markdownToken() {\n        return \"fence\";\n    }\n    parseMarkdown() {\n        return {\n            block: \"code_block\",\n            getAttrs: tok => ({ language: tok.info }),\n        };\n    }\n}\nexports.default = CodeFence;\n//# sourceMappingURL=CodeFence.js.map"]},"metadata":{},"sourceType":"script"}