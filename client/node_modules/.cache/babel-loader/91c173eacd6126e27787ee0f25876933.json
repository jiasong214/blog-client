{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\n\nconst toggleList_1 = __importDefault(require(\"../commands/toggleList\"));\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nclass OrderedList extends Node_1.default {\n  get name() {\n    return \"ordered_list\";\n  }\n\n  get schema() {\n    return {\n      attrs: {\n        order: {\n          default: 1\n        }\n      },\n      content: \"list_item+\",\n      group: \"block\",\n      parseDOM: [{\n        tag: \"ol\",\n        getAttrs: dom => ({\n          order: dom.hasAttribute(\"start\") ? parseInt(dom.getAttribute(\"start\") || \"1\", 10) : 1\n        })\n      }],\n      toDOM: node => node.attrs.order === 1 ? [\"ol\", 0] : [\"ol\", {\n        start: node.attrs.order\n      }, 0]\n    };\n  }\n\n  commands({\n    type,\n    schema\n  }) {\n    return () => toggleList_1.default(type, schema.nodes.list_item);\n  }\n\n  keys({\n    type,\n    schema\n  }) {\n    return {\n      \"Shift-Ctrl-9\": toggleList_1.default(type, schema.nodes.list_item)\n    };\n  }\n\n  inputRules({\n    type\n  }) {\n    return [prosemirror_inputrules_1.wrappingInputRule(/^(\\d+)\\.\\s$/, type, match => ({\n      order: +match[1]\n    }), (match, node) => node.childCount + node.attrs.order === +match[1])];\n  }\n\n  toMarkdown(state, node) {\n    const start = node.attrs.order || 1;\n    const maxW = `${start + node.childCount - 1}`.length;\n    const space = state.repeat(\" \", maxW + 2);\n    state.renderList(node, space, i => {\n      const nStr = `${start + i}`;\n      return state.repeat(\" \", maxW - nStr.length) + nStr + \". \";\n    });\n  }\n\n  parseMarkdown() {\n    return {\n      block: \"ordered_list\"\n    };\n  }\n\n}\n\nexports.default = OrderedList;","map":{"version":3,"sources":["../../src/nodes/OrderedList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\nconst toggleList_1 = __importDefault(require(\"../commands/toggleList\"));\nconst Node_1 = __importDefault(require(\"./Node\"));\nclass OrderedList extends Node_1.default {\n    get name() {\n        return \"ordered_list\";\n    }\n    get schema() {\n        return {\n            attrs: {\n                order: {\n                    default: 1,\n                },\n            },\n            content: \"list_item+\",\n            group: \"block\",\n            parseDOM: [\n                {\n                    tag: \"ol\",\n                    getAttrs: (dom) => ({\n                        order: dom.hasAttribute(\"start\")\n                            ? parseInt(dom.getAttribute(\"start\") || \"1\", 10)\n                            : 1,\n                    }),\n                },\n            ],\n            toDOM: node => node.attrs.order === 1\n                ? [\"ol\", 0]\n                : [\"ol\", { start: node.attrs.order }, 0],\n        };\n    }\n    commands({ type, schema }) {\n        return () => toggleList_1.default(type, schema.nodes.list_item);\n    }\n    keys({ type, schema }) {\n        return {\n            \"Shift-Ctrl-9\": toggleList_1.default(type, schema.nodes.list_item),\n        };\n    }\n    inputRules({ type }) {\n        return [\n            prosemirror_inputrules_1.wrappingInputRule(/^(\\d+)\\.\\s$/, type, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order === +match[1]),\n        ];\n    }\n    toMarkdown(state, node) {\n        const start = node.attrs.order || 1;\n        const maxW = `${start + node.childCount - 1}`.length;\n        const space = state.repeat(\" \", maxW + 2);\n        state.renderList(node, space, i => {\n            const nStr = `${start + i}`;\n            return state.repeat(\" \", maxW - nStr.length) + nStr + \". \";\n        });\n    }\n    parseMarkdown() {\n        return { block: \"ordered_list\" };\n    }\n}\nexports.default = OrderedList;\n//# sourceMappingURL=OrderedList.js.map"]},"metadata":{},"sourceType":"script"}