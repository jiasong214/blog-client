{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst getMarkRange_1 = __importDefault(require(\"../queries/getMarkRange\"));\n\nconst Mark_1 = __importDefault(require(\"./Mark\"));\n\nclass Placeholder extends Mark_1.default {\n  get name() {\n    return \"placeholder\";\n  }\n\n  get schema() {\n    return {\n      parseDOM: [{\n        tag: \"span.template-placeholder\"\n      }],\n      toDOM: () => [\"span\", {\n        class: \"template-placeholder\"\n      }]\n    };\n  }\n\n  get toMarkdown() {\n    return {\n      open: \"!!\",\n      close: \"!!\",\n      mixable: true,\n      expelEnclosingWhitespace: true\n    };\n  }\n\n  parseMarkdown() {\n    return {\n      mark: \"placeholder\"\n    };\n  }\n\n  get plugins() {\n    return [new prosemirror_state_1.Plugin({\n      props: {\n        handleTextInput: (view, from, to, text) => {\n          if (this.editor.props.template) {\n            return false;\n          }\n\n          const {\n            state,\n            dispatch\n          } = view;\n          const $from = state.doc.resolve(from);\n          const range = getMarkRange_1.default($from, state.schema.marks.placeholder);\n          if (!range) return false;\n          const selectionStart = Math.min(from, range.from);\n          const selectionEnd = Math.max(to, range.to);\n          dispatch(state.tr.removeMark(range.from, range.to, state.schema.marks.placeholder).insertText(text, selectionStart, selectionEnd));\n          const $to = view.state.doc.resolve(selectionStart + text.length);\n          dispatch(view.state.tr.setSelection(prosemirror_state_1.TextSelection.near($to)));\n          return true;\n        },\n        handleKeyDown: (view, event) => {\n          if (!view.props.editable || !view.props.editable(view.state)) {\n            return false;\n          }\n\n          if (this.editor.props.template) {\n            return false;\n          }\n\n          if (event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\" && event.key !== \"Backspace\") {\n            return false;\n          }\n\n          const {\n            state,\n            dispatch\n          } = view;\n\n          if (event.key === \"Backspace\") {\n            const range = getMarkRange_1.default(state.doc.resolve(Math.max(0, state.selection.from - 1)), state.schema.marks.placeholder);\n            if (!range) return false;\n            dispatch(state.tr.removeMark(range.from, range.to, state.schema.marks.placeholder).insertText(\"\", range.from, range.to));\n            return true;\n          }\n\n          if (event.key === \"ArrowLeft\") {\n            const range = getMarkRange_1.default(state.doc.resolve(Math.max(0, state.selection.from - 1)), state.schema.marks.placeholder);\n            if (!range) return false;\n            const startOfMark = state.doc.resolve(range.from);\n            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(startOfMark)));\n            return true;\n          }\n\n          if (event.key === \"ArrowRight\") {\n            const range = getMarkRange_1.default(state.selection.$from, state.schema.marks.placeholder);\n            if (!range) return false;\n            const endOfMark = state.doc.resolve(range.to);\n            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(endOfMark)));\n            return true;\n          }\n\n          return false;\n        },\n        handleClick: (view, pos, event) => {\n          if (!view.props.editable || !view.props.editable(view.state)) {\n            return false;\n          }\n\n          if (this.editor.props.template) {\n            return false;\n          }\n\n          if (event.target instanceof HTMLSpanElement && event.target.className.includes(\"template-placeholder\")) {\n            const {\n              state,\n              dispatch\n            } = view;\n            const range = getMarkRange_1.default(state.selection.$from, state.schema.marks.placeholder);\n            if (!range) return false;\n            event.stopPropagation();\n            event.preventDefault();\n            const startOfMark = state.doc.resolve(range.from);\n            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(startOfMark)));\n            return true;\n          }\n\n          return false;\n        }\n      }\n    })];\n  }\n\n}\n\nexports.default = Placeholder;","map":{"version":3,"sources":["../../src/marks/Placeholder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst getMarkRange_1 = __importDefault(require(\"../queries/getMarkRange\"));\nconst Mark_1 = __importDefault(require(\"./Mark\"));\nclass Placeholder extends Mark_1.default {\n    get name() {\n        return \"placeholder\";\n    }\n    get schema() {\n        return {\n            parseDOM: [{ tag: \"span.template-placeholder\" }],\n            toDOM: () => [\"span\", { class: \"template-placeholder\" }],\n        };\n    }\n    get toMarkdown() {\n        return {\n            open: \"!!\",\n            close: \"!!\",\n            mixable: true,\n            expelEnclosingWhitespace: true,\n        };\n    }\n    parseMarkdown() {\n        return { mark: \"placeholder\" };\n    }\n    get plugins() {\n        return [\n            new prosemirror_state_1.Plugin({\n                props: {\n                    handleTextInput: (view, from, to, text) => {\n                        if (this.editor.props.template) {\n                            return false;\n                        }\n                        const { state, dispatch } = view;\n                        const $from = state.doc.resolve(from);\n                        const range = getMarkRange_1.default($from, state.schema.marks.placeholder);\n                        if (!range)\n                            return false;\n                        const selectionStart = Math.min(from, range.from);\n                        const selectionEnd = Math.max(to, range.to);\n                        dispatch(state.tr\n                            .removeMark(range.from, range.to, state.schema.marks.placeholder)\n                            .insertText(text, selectionStart, selectionEnd));\n                        const $to = view.state.doc.resolve(selectionStart + text.length);\n                        dispatch(view.state.tr.setSelection(prosemirror_state_1.TextSelection.near($to)));\n                        return true;\n                    },\n                    handleKeyDown: (view, event) => {\n                        if (!view.props.editable || !view.props.editable(view.state)) {\n                            return false;\n                        }\n                        if (this.editor.props.template) {\n                            return false;\n                        }\n                        if (event.key !== \"ArrowLeft\" &&\n                            event.key !== \"ArrowRight\" &&\n                            event.key !== \"Backspace\") {\n                            return false;\n                        }\n                        const { state, dispatch } = view;\n                        if (event.key === \"Backspace\") {\n                            const range = getMarkRange_1.default(state.doc.resolve(Math.max(0, state.selection.from - 1)), state.schema.marks.placeholder);\n                            if (!range)\n                                return false;\n                            dispatch(state.tr\n                                .removeMark(range.from, range.to, state.schema.marks.placeholder)\n                                .insertText(\"\", range.from, range.to));\n                            return true;\n                        }\n                        if (event.key === \"ArrowLeft\") {\n                            const range = getMarkRange_1.default(state.doc.resolve(Math.max(0, state.selection.from - 1)), state.schema.marks.placeholder);\n                            if (!range)\n                                return false;\n                            const startOfMark = state.doc.resolve(range.from);\n                            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(startOfMark)));\n                            return true;\n                        }\n                        if (event.key === \"ArrowRight\") {\n                            const range = getMarkRange_1.default(state.selection.$from, state.schema.marks.placeholder);\n                            if (!range)\n                                return false;\n                            const endOfMark = state.doc.resolve(range.to);\n                            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(endOfMark)));\n                            return true;\n                        }\n                        return false;\n                    },\n                    handleClick: (view, pos, event) => {\n                        if (!view.props.editable || !view.props.editable(view.state)) {\n                            return false;\n                        }\n                        if (this.editor.props.template) {\n                            return false;\n                        }\n                        if (event.target instanceof HTMLSpanElement &&\n                            event.target.className.includes(\"template-placeholder\")) {\n                            const { state, dispatch } = view;\n                            const range = getMarkRange_1.default(state.selection.$from, state.schema.marks.placeholder);\n                            if (!range)\n                                return false;\n                            event.stopPropagation();\n                            event.preventDefault();\n                            const startOfMark = state.doc.resolve(range.from);\n                            dispatch(state.tr.setSelection(prosemirror_state_1.TextSelection.near(startOfMark)));\n                            return true;\n                        }\n                        return false;\n                    },\n                },\n            }),\n        ];\n    }\n}\nexports.default = Placeholder;\n//# sourceMappingURL=Placeholder.js.map"]},"metadata":{},"sourceType":"script"}