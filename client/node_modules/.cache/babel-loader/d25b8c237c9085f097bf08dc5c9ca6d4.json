{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\n\nconst markInputRule_1 = __importDefault(require(\"../lib/markInputRule\"));\n\nconst moveLeft_1 = __importDefault(require(\"../commands/moveLeft\"));\n\nconst moveRight_1 = __importDefault(require(\"../commands/moveRight\"));\n\nconst Mark_1 = __importDefault(require(\"./Mark\"));\n\nfunction backticksFor(node, side) {\n  const ticks = /`+/g;\n  let match;\n  let len = 0;\n\n  if (node.isText) {\n    while (match = ticks.exec(node.text)) {\n      len = Math.max(len, match[0].length);\n    }\n  }\n\n  let result = len > 0 && side > 0 ? \" `\" : \"`\";\n\n  for (let i = 0; i < len; i++) {\n    result += \"`\";\n  }\n\n  if (len > 0 && side < 0) {\n    result += \" \";\n  }\n\n  return result;\n}\n\nclass Code extends Mark_1.default {\n  get name() {\n    return \"code_inline\";\n  }\n\n  get schema() {\n    return {\n      excludes: \"_\",\n      parseDOM: [{\n        tag: \"code\",\n        preserveWhitespace: true\n      }],\n      toDOM: () => [\"code\", {\n        spellCheck: false\n      }]\n    };\n  }\n\n  inputRules({\n    type\n  }) {\n    return [markInputRule_1.default(/(?:^|[^`])(`([^`]+)`)$/, type)];\n  }\n\n  keys({\n    type\n  }) {\n    return {\n      \"Mod`\": prosemirror_commands_1.toggleMark(type),\n      ArrowLeft: moveLeft_1.default(),\n      ArrowRight: moveRight_1.default()\n    };\n  }\n\n  get toMarkdown() {\n    return {\n      open(_state, _mark, parent, index) {\n        return backticksFor(parent.child(index), -1);\n      },\n\n      close(_state, _mark, parent, index) {\n        return backticksFor(parent.child(index - 1), 1);\n      },\n\n      escape: false\n    };\n  }\n\n  parseMarkdown() {\n    return {\n      mark: \"code_inline\"\n    };\n  }\n\n}\n\nexports.default = Code;","map":{"version":3,"sources":["../../src/marks/Code.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,sBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,IAA5B,EAAgC;AAC9B,QAAM,KAAK,GAAG,KAAd;AACA,MAAI,KAAJ;AACA,MAAI,GAAG,GAAG,CAAV;;AAEA,MAAI,IAAI,CAAC,MAAT,EAAiB;AACf,WAAQ,KAAK,GAAG,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,IAAhB,CAAhB,EAAwC;AACtC,MAAA,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAK,CAAC,CAAD,CAAL,CAAS,MAAvB,CAAN;AACD;AACF;;AAED,MAAI,MAAM,GAAG,GAAG,GAAG,CAAN,IAAW,IAAI,GAAG,CAAlB,GAAsB,IAAtB,GAA6B,GAA1C;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,IAAA,MAAM,IAAI,GAAV;AACD;;AACD,MAAI,GAAG,GAAG,CAAN,IAAW,IAAI,GAAG,CAAtB,EAAyB;AACvB,IAAA,MAAM,IAAI,GAAV;AACD;;AACD,SAAO,MAAP;AACD;;AAED,MAAqB,IAArB,SAAkC,MAAA,CAAA,OAAlC,CAAsC;AAC5B,MAAJ,IAAI,GAAA;AACN,WAAO,aAAP;AACD;;AAES,MAAN,MAAM,GAAA;AACR,WAAO;AACL,MAAA,QAAQ,EAAE,GADL;AAEL,MAAA,QAAQ,EAAE,CAAC;AAAE,QAAA,GAAG,EAAE,MAAP;AAAe,QAAA,kBAAkB,EAAE;AAAnC,OAAD,CAFL;AAGL,MAAA,KAAK,EAAE,MAAM,CAAC,MAAD,EAAS;AAAE,QAAA,UAAU,EAAE;AAAd,OAAT;AAHR,KAAP;AAKD;;AAED,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AACjB,WAAO,CAAC,eAAA,CAAA,OAAA,CAAc,wBAAd,EAAwC,IAAxC,CAAD,CAAP;AACD;;AAED,EAAA,IAAI,CAAC;AAAE,IAAA;AAAF,GAAD,EAAS;AAGX,WAAO;AACL,cAAQ,sBAAA,CAAA,UAAA,CAAW,IAAX,CADH;AAEL,MAAA,SAAS,EAAE,UAAA,CAAA,OAAA,EAFN;AAGL,MAAA,UAAU,EAAE,WAAA,CAAA,OAAA;AAHP,KAAP;AAKD;;AAEa,MAAV,UAAU,GAAA;AACZ,WAAO;AACL,MAAA,IAAI,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,EAA6B;AAC/B,eAAO,YAAY,CAAC,MAAM,CAAC,KAAP,CAAa,KAAb,CAAD,EAAsB,CAAC,CAAvB,CAAnB;AACD,OAHI;;AAIL,MAAA,KAAK,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,EAA6B;AAChC,eAAO,YAAY,CAAC,MAAM,CAAC,KAAP,CAAa,KAAK,GAAG,CAArB,CAAD,EAA0B,CAA1B,CAAnB;AACD,OANI;;AAOL,MAAA,MAAM,EAAE;AAPH,KAAP;AASD;;AAED,EAAA,aAAa,GAAA;AACX,WAAO;AAAE,MAAA,IAAI,EAAE;AAAR,KAAP;AACD;;AAzCmC;;AAAtC,OAAA,CAAA,OAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\nconst markInputRule_1 = __importDefault(require(\"../lib/markInputRule\"));\nconst moveLeft_1 = __importDefault(require(\"../commands/moveLeft\"));\nconst moveRight_1 = __importDefault(require(\"../commands/moveRight\"));\nconst Mark_1 = __importDefault(require(\"./Mark\"));\nfunction backticksFor(node, side) {\n    const ticks = /`+/g;\n    let match;\n    let len = 0;\n    if (node.isText) {\n        while ((match = ticks.exec(node.text))) {\n            len = Math.max(len, match[0].length);\n        }\n    }\n    let result = len > 0 && side > 0 ? \" `\" : \"`\";\n    for (let i = 0; i < len; i++) {\n        result += \"`\";\n    }\n    if (len > 0 && side < 0) {\n        result += \" \";\n    }\n    return result;\n}\nclass Code extends Mark_1.default {\n    get name() {\n        return \"code_inline\";\n    }\n    get schema() {\n        return {\n            excludes: \"_\",\n            parseDOM: [{ tag: \"code\", preserveWhitespace: true }],\n            toDOM: () => [\"code\", { spellCheck: false }],\n        };\n    }\n    inputRules({ type }) {\n        return [markInputRule_1.default(/(?:^|[^`])(`([^`]+)`)$/, type)];\n    }\n    keys({ type }) {\n        return {\n            \"Mod`\": prosemirror_commands_1.toggleMark(type),\n            ArrowLeft: moveLeft_1.default(),\n            ArrowRight: moveRight_1.default(),\n        };\n    }\n    get toMarkdown() {\n        return {\n            open(_state, _mark, parent, index) {\n                return backticksFor(parent.child(index), -1);\n            },\n            close(_state, _mark, parent, index) {\n                return backticksFor(parent.child(index - 1), 1);\n            },\n            escape: false,\n        };\n    }\n    parseMarkdown() {\n        return { mark: \"code_inline\" };\n    }\n}\nexports.default = Code;\n//# sourceMappingURL=Code.js.map"]},"metadata":{},"sourceType":"script"}