{"ast":null,"code":"export default class PostService {\n  constructor() {\n    this.baseURL = 'http://localhost:8080';\n  }\n\n  async getPostsByCategory(category) {\n    // if(category){\n    //   return this.posts.filter((post) => (\n    //     post.category.includes(category)\n    //   ))\n    // }\n    // return this.posts;\n    const query = category ? `/category/${category}` : '';\n    console.log(category, query);\n    const res = await fetch(`${this.baseURL}/post${query}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async getPostById(id) {\n    // return this.posts.filter(post => parseInt(post.id) === parseInt(id));\n    const res = await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const post = {\n      id: Date.now().toString(),\n      category,\n      title,\n      text,\n      createAt: new Date().toString()\n    };\n    return this.posts = [post, ...this.posts];\n  }\n\n  async updatePost(id, category, title, text) {\n    const post = this.posts.find(post => parseInt(post.id) === parseInt(id));\n    post.category = category;\n    post.title = title;\n    post.text = text;\n    return this.posts;\n  }\n\n  async deletePost(id) {\n    return this.posts = this.posts.filter(post => parseInt(post.id) !== parseInt(id));\n  }\n\n  async getCategories() {\n    const categoryArr = [];\n    this.posts.forEach(post => {\n      if (!post.category) return;\n      post.category.forEach(item => {\n        if (categoryArr.includes(item)) return;\n        categoryArr.push(item);\n      });\n    });\n    return categoryArr;\n  }\n\n}","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/service/post.js"],"names":["PostService","constructor","baseURL","getPostsByCategory","category","query","console","log","res","fetch","headers","method","data","json","err","error","getPostById","id","createPost","title","text","post","Date","now","toString","createAt","posts","updatePost","find","parseInt","deletePost","filter","getCategories","categoryArr","forEach","item","includes","push"],"mappings":"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","sourcesContent":["export default class PostService {\n  constructor () {\n    this.baseURL = 'http://localhost:8080';\n  }\n\n  async getPostsByCategory(category) {\n    // if(category){\n    //   return this.posts.filter((post) => (\n    //     post.category.includes(category)\n    //   ))\n    // }\n\n    // return this.posts;\n\n    const query = category ? `/category/${category}` : '';\n    console.log(category, query)\n\n    const res =  await fetch(`${this.baseURL}/post${query}`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async getPostById(id) {\n    // return this.posts.filter(post => parseInt(post.id) === parseInt(id));\n\n\n    const res =  await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const post = {\n      id: Date.now().toString(),\n      category,\n      title,\n      text,\n      createAt: new Date().toString()\n    }\n\n    return this.posts = [post, ...this.posts];\n  }\n\n  async updatePost(id, category, title, text) {\n    const post = this.posts.find((post) => parseInt(post.id) === parseInt(id));\n\n    post.category = category;\n    post.title = title;\n    post.text = text;\n\n    return this.posts;\n  }\n\n  async deletePost(id) {\n    return this.posts =  this.posts.filter((post) => parseInt(post.id) !== parseInt(id));\n  }\n\n  async getCategories() {\n    const categoryArr = [];\n    this.posts.forEach((post) => {\n      if(!post.category) return;\n      \n      post.category.forEach((item) => {\n        if(categoryArr.includes(item)) return;\n        categoryArr.push(item);\n      })\n    });\n\n    return categoryArr;\n  }\n}"]},"metadata":{},"sourceType":"module"}