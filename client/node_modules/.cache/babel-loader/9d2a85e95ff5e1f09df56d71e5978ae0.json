{"ast":null,"code":"export default class HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async fetch(url, options) {\n    console.log(url); //set all http options, and fetch data\n\n    const res = await fetch(`${this.baseURL}${url}`, { ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    }); //fomat data to json, and catch error\n\n    let data;\n\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    } //if there is error in respond, throw error message\n\n\n    if (res.status > 299 || res.status < 200) {\n      const message = data && data.message ? data.message : 'http error!';\n      throw new Error(message);\n    } //if everything is okay, return json data\n\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/network/http.js"],"names":["HttpClient","constructor","baseURL","fetch","url","options","console","log","res","headers","data","json","error","status","message","Error"],"mappings":"AAAA,eAAe,MAAMA,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEU,QAALC,KAAK,CAACC,GAAD,EAAMC,OAAN,EAAe;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EADwB,CAExB;;AACA,UAAMI,GAAG,GAAG,MAAML,KAAK,CAAE,GAAE,KAAKD,OAAQ,GAAEE,GAAI,EAAvB,EAA0B,EAC/C,GAAGC,OAD4C;AAE/CI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,WAAGJ,OAAO,CAACI;AAFJ;AAFsC,KAA1B,CAAvB,CAHwB,CAWxB;;AACA,QAAIC,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAb;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdN,MAAAA,OAAO,CAACM,KAAR,CAAcA,KAAd;AACD,KAjBuB,CAmBxB;;;AACA,QAAIJ,GAAG,CAACK,MAAJ,GAAa,GAAb,IAAoBL,GAAG,CAACK,MAAJ,GAAa,GAArC,EAA0C;AACxC,YAAMC,OAAO,GACXJ,IAAI,IAAIA,IAAI,CAACI,OAAb,GAAuBJ,IAAI,CAACI,OAA5B,GAAsC,aADxC;AAEA,YAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN;AACD,KAxBuB,CA0BxB;;;AACA,WAAOJ,IAAP;AACD;;AAjC6B","sourcesContent":["export default class HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async fetch(url, options) {\n    console.log(url)\n    //set all http options, and fetch data\n    const res = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    //fomat data to json, and catch error\n    let data;\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    }\n\n    //if there is error in respond, throw error message\n    if (res.status > 299 || res.status < 200) {\n      const message =\n        data && data.message ? data.message : 'http error!';\n      throw new Error(message);\n    }\n\n    //if everything is okay, return json data\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}