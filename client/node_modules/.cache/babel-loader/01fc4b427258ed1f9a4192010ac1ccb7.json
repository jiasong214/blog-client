{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport Markdown, { compiler } from 'markdown-to-jsx';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreatePost = ({\n  postService,\n  changePostsByCreate,\n  changePostsByUpdate\n}) => {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [markdown, setMarkdown] = useState(''); //UPDATE: if it's for update, set post's data\n\n  useEffect(() => {\n    if (params.id) {\n      postService.getPostById(params.id).then(data => setFormerData(data)).catch(console.error());\n    }\n  }, [postService, params.id]); //UPDATE: after formerData is set, set all input state with that.\n\n  useEffect(() => {\n    if (formerData) {\n      //set title, category state\n      setPostTitle(formerData.title);\n      setPostCategory(formerData.category); //convert html text to draft format and set state\n\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const {\n        contentBlocks,\n        entityMap\n      } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData]); //input handling\n\n  const onTitleChange = event => setPostTitle(event.target.value);\n\n  const onCategoryChange = event => setPostCategory(event.target.value);\n\n  const onMarkdownChange = event => setMarkdown(event.target.value); // //convert draft format to html format\n  // const convertToHtml = (editorState) => {\n  //   const rawText = convertToRaw(editorState.getCurrentContent())\n  //   const HtmlConversion = draftToHtml(rawText);\n  //   return HtmlConversion;\n  // }\n  //convert category strings to array\n\n\n  const convertToArray = postCategory => {\n    if (!postCategory) return;\n    if (!postCategory.includes(\" \")) return;\n    let categoryArr = postCategory.split(' ');\n    return categoryArr.map(category => {\n      const lowerStr = category.toString().toLowerCase();\n      const pureStr = lowerStr.split(\"#\");\n      return pureStr[pureStr.length - 1];\n    }).toString();\n  }; //form submit\n\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: markdown\n    };\n\n    if (params.id) {\n      //UPDATE\n      postService.updatePost(params.id, post.category, post.title, post.text).then(data => changePostsByUpdate(params.id, data)).catch(console.error);\n      history.push(`/post/${params.id}`);\n    } else {\n      //CREATE\n      postService.createPost(post.category, post.title, post.text).then(data => changePostsByCreate(data)).catch(console.error);\n      history.push(\"/\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createPost\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__title\",\n        placeholder: \"Title\",\n        value: postTitle ? postTitle : '',\n        onChange: event => onTitleChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__category\",\n        placeholder: \"#React #Javascript\",\n        value: postCategory ? postCategory : '',\n        onChange: event => onCategoryChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createPost__text\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: event => onMarkdownChange(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: markdown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"createPost__submitBtn\",\n        children: \"Compost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreatePost, \"g8v3fS3uExOVqFyokTIDTLLVX8g=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx"],"names":["React","useEffect","useState","useParams","useHistory","Editor","EditorState","convertToRaw","ContentState","draftToHtml","htmlToDraft","Markdown","compiler","ReactMarkdown","CreatePost","postService","changePostsByCreate","changePostsByUpdate","history","params","formerData","setFormerData","postTitle","setPostTitle","postCategory","setPostCategory","markdown","setMarkdown","id","getPostById","then","data","catch","console","error","title","category","blocksFromHtml","text","contentBlocks","entityMap","contentState","createFromBlockArray","editorState","createWithContent","setEditorState","onTitleChange","event","target","value","onCategoryChange","onMarkdownChange","convertToArray","includes","categoryArr","split","map","lowerStr","toString","toLowerCase","pureStr","length","onSubmit","preventDefault","post","updatePost","push","createPost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,0BAAP;AAEA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,QAAwD,UAAxD;AACA,OAAO,kDAAP;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,iBAAnC;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAcC,EAAAA,mBAAd;AAAmCC,EAAAA;AAAnC,CAAD,KAA6D;AAAA;;AAC9E,QAAMC,OAAO,GAAGd,UAAU,EAA1B;AACA,QAAMe,MAAM,GAAGhB,SAAS,EAAxB;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,EAA5C;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,EAA1C;AACA,QAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,EAAhD;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,EAAD,CAAxC,CAN8E,CAU9E;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGkB,MAAM,CAACS,EAAV,EAAa;AACXb,MAAAA,WAAW,CACRc,WADH,CACeV,MAAM,CAACS,EADtB,EAEGE,IAFH,CAESC,IAAD,IAAUV,aAAa,CAACU,IAAD,CAF/B,EAGGC,KAHH,CAGSC,OAAO,CAACC,KAAR,EAHT;AAID;AACF,GAPQ,EAON,CAACnB,WAAD,EAAcI,MAAM,CAACS,EAArB,CAPM,CAAT,CAX8E,CAoB9E;;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGmB,UAAH,EAAc;AACZ;AACAG,MAAAA,YAAY,CAACH,UAAU,CAACe,KAAZ,CAAZ;AACAV,MAAAA,eAAe,CAACL,UAAU,CAACgB,QAAZ,CAAf,CAHY,CAKZ;;AACA,YAAMC,cAAc,GAAG3B,WAAW,CAACU,UAAU,CAACkB,IAAZ,CAAlC;AACA,YAAM;AAAEC,QAAAA,aAAF;AAAiBC,QAAAA;AAAjB,UAA+BH,cAArC;AACA,YAAMI,YAAY,GAAGjC,YAAY,CAACkC,oBAAb,CAAkCH,aAAlC,EAAiDC,SAAjD,CAArB;AACA,YAAMG,WAAW,GAAGrC,WAAW,CAACsC,iBAAZ,CAA8BH,YAA9B,CAApB;AACAI,MAAAA,cAAc,CAACF,WAAD,CAAd;AACD;AACF,GAbQ,EAaN,CAACvB,UAAD,CAbM,CAAT,CArB8E,CAoC9E;;AACA,QAAM0B,aAAa,GAAIC,KAAD,IAAWxB,YAAY,CAACwB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAA7C;;AACA,QAAMC,gBAAgB,GAAIH,KAAD,IAAWtB,eAAe,CAACsB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnD;;AACA,QAAME,gBAAgB,GAAIJ,KAAD,IAAWpB,WAAW,CAACoB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAA/C,CAvC8E,CAyC9E;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AACA,QAAMG,cAAc,GAAI5B,YAAD,IAAkB;AACvC,QAAG,CAACA,YAAJ,EAAkB;AAClB,QAAG,CAACA,YAAY,CAAC6B,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAEhC,QAAIC,WAAW,GAAG9B,YAAY,CAAC+B,KAAb,CAAmB,GAAnB,CAAlB;AAEA,WAAOD,WAAW,CAACE,GAAZ,CAAiBpB,QAAD,IAAc;AACnC,YAAMqB,QAAQ,GAAGrB,QAAQ,CAACsB,QAAT,GAAoBC,WAApB,EAAjB;AACA,YAAMC,OAAO,GAAGH,QAAQ,CAACF,KAAT,CAAe,GAAf,CAAhB;AAEA,aAAOK,OAAO,CAACA,OAAO,CAACC,MAAR,GAAiB,CAAlB,CAAd;AACD,KALM,EAKJH,QALI,EAAP;AAMD,GAZD,CAlD8E,CAgE9E;;;AACA,QAAMI,QAAQ,GAAIf,KAAD,IAAW;AAC1BA,IAAAA,KAAK,CAACgB,cAAN;AAEA,UAAMC,IAAI,GAAG;AACX5B,MAAAA,QAAQ,EAAEgB,cAAc,CAAC5B,YAAD,CADb;AAEXW,MAAAA,KAAK,EAAEb,SAFI;AAGXgB,MAAAA,IAAI,EAAEZ;AAHK,KAAb;;AAMA,QAAGP,MAAM,CAACS,EAAV,EAAa;AACb;AACEb,MAAAA,WAAW,CACRkD,UADH,CACc9C,MAAM,CAACS,EADrB,EAC0BoC,IAAI,CAAC5B,QAD/B,EACyC4B,IAAI,CAAC7B,KAD9C,EACqD6B,IAAI,CAAC1B,IAD1D,EAEGR,IAFH,CAESC,IAAD,IAAUd,mBAAmB,CAACE,MAAM,CAACS,EAAR,EAAYG,IAAZ,CAFrC,EAGGC,KAHH,CAGSC,OAAO,CAACC,KAHjB;AAKAhB,MAAAA,OAAO,CAACgD,IAAR,CAAc,SAAQ/C,MAAM,CAACS,EAAG,EAAhC;AACD,KARD,MAQM;AACN;AACEb,MAAAA,WAAW,CACRoD,UADH,CACcH,IAAI,CAAC5B,QADnB,EAC6B4B,IAAI,CAAC7B,KADlC,EACyC6B,IAAI,CAAC1B,IAD9C,EAEGR,IAFH,CAESC,IAAD,IAAUf,mBAAmB,CAACe,IAAD,CAFrC,EAGGC,KAHH,CAGSC,OAAO,CAACC,KAHjB;AAKAhB,MAAAA,OAAO,CAACgD,IAAR,CAAa,GAAb;AACD;AACF,GA1BD;;AA6BA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEJ,QAAhB;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAGE,QAAA,WAAW,EAAC,OAHd;AAIE,QAAA,KAAK,EAAExC,SAAS,GAAGA,SAAH,GAAe,EAJjC;AAKE,QAAA,QAAQ,EAAGyB,KAAD,IAAWD,aAAa,CAACC,KAAD;AALpC;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC,sBAFZ;AAGE,QAAA,WAAW,EAAC,oBAHd;AAIE,QAAA,KAAK,EAAEvB,YAAY,GAAGA,YAAH,GAAkB,EAJvC;AAKE,QAAA,QAAQ,EAAGuB,KAAD,IAAWG,gBAAgB,CAACH,KAAD;AALvC;AAAA;AAAA;AAAA;AAAA,cARF,eAeE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAU,UAAA,QAAQ,EAAGA,KAAD,IAAWI,gBAAgB,CAACJ,KAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCACE,QAAC,aAAD;AAAA,sBAAgBrB;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eAqBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,uBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAzHD;;GAAMZ,U;UACYV,U,EACDD,S;;;KAFXW,U;AA2HN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nimport Markdown, { compiler } from 'markdown-to-jsx';\n\nimport ReactMarkdown from 'react-markdown'\n\nconst CreatePost = ({postService, changePostsByCreate, changePostsByUpdate}) => {\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [markdown, setMarkdown] = useState('');\n\n  \n\n  //UPDATE: if it's for update, set post's data\n  useEffect(() => {\n    if(params.id){\n      postService\n        .getPostById(params.id)\n        .then((data) => setFormerData(data))\n        .catch(console.error());\n    }\n  }, [postService, params.id]);\n\n  //UPDATE: after formerData is set, set all input state with that.\n  useEffect(() => {\n    if(formerData){\n      //set title, category state\n      setPostTitle(formerData.title);\n      setPostCategory(formerData.category);\n\n      //convert html text to draft format and set state\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const { contentBlocks, entityMap } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData])\n\n  //input handling\n  const onTitleChange = (event) => setPostTitle(event.target.value);\n  const onCategoryChange = (event) => setPostCategory(event.target.value);\n  const onMarkdownChange = (event) => setMarkdown(event.target.value);\n\n  // //convert draft format to html format\n  // const convertToHtml = (editorState) => {\n  //   const rawText = convertToRaw(editorState.getCurrentContent())\n  //   const HtmlConversion = draftToHtml(rawText);\n\n  //   return HtmlConversion;\n  // }\n\n  //convert category strings to array\n  const convertToArray = (postCategory) => {\n    if(!postCategory) return;\n    if(!postCategory.includes(\" \")) return;\n\n    let categoryArr = postCategory.split(' ');\n\n    return categoryArr.map((category) => {\n      const lowerStr = category.toString().toLowerCase();\n      const pureStr = lowerStr.split(\"#\");\n\n      return pureStr[pureStr.length - 1];\n    }).toString();\n  }\n\n  //form submit\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: markdown\n    }\n\n    if(params.id){\n    //UPDATE\n      postService\n        .updatePost(params.id , post.category, post.title, post.text)\n        .then((data) => changePostsByUpdate(params.id, data))\n        .catch(console.error);\n\n      history.push(`/post/${params.id}`);\n    }else {\n    //CREATE\n      postService\n        .createPost(post.category, post.title, post.text)\n        .then((data) => changePostsByCreate(data))\n        .catch(console.error);\n\n      history.push(\"/\");\n    }\n  }\n\n\n  return (\n    <div className=\"createPost\">\n      <form onSubmit={onSubmit}>\n        <input \n          type=\"text\" \n          className=\"createPost__title\" \n          placeholder=\"Title\" \n          value={postTitle ? postTitle : ''}\n          onChange={(event) => onTitleChange(event)} \n        />\n        <input  \n          type=\"text\" \n          className=\"createPost__category\" \n          placeholder=\"#React #Javascript\" \n          value={postCategory ? postCategory : ''} \n          onChange={(event) => onCategoryChange(event)} \n        />\n        <div className=\"createPost__text\">\n          <textarea onChange={(event) => onMarkdownChange(event)}></textarea>\n          <div>\n            <ReactMarkdown>{markdown}</ReactMarkdown>\n          </div>\n        </div>\n        <button type='submit' className=\"createPost__submitBtn\">Compost</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreatePost;"]},"metadata":{},"sourceType":"module"}