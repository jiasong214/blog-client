{"ast":null,"code":"export default class PostService {\n  constructor(tokenStorage) {\n    this.baseURL = 'http://localhost:8080';\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getPostsByCategory(category) {\n    const query = category ? `/category/${category}` : '';\n    const token = this.tokenStorage.getToken();\n    console.log(token);\n    const res = await fetch(`${this.baseURL}/post${query}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async getPostById(id) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        category,\n        title,\n        text\n      })\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async updatePost(id, category, title, text) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'PUT',\n      body: JSON.stringify({\n        category,\n        title,\n        text\n      })\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async deletePost(id) {\n    const token = this.tokenStorage.getToken();\n    return await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'DELETE'\n    });\n  }\n\n  async getCategories() {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/category`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/service/post.js"],"names":["PostService","constructor","tokenStorage","baseURL","getPostsByCategory","category","query","token","getToken","console","log","res","fetch","headers","method","data","json","err","error","getPostById","id","createPost","title","text","body","JSON","stringify","updatePost","deletePost","getCategories"],"mappings":"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","sourcesContent":["export default class PostService {\n  constructor (tokenStorage) {\n    this.baseURL = 'http://localhost:8080';\n    this.tokenStorage = tokenStorage;\n\n  }\n\n  async getPostsByCategory(category) {\n    const query = category ? `/category/${category}` : '';\n    const token = this.tokenStorage.getToken();\n\n    console.log(token)\n\n\n    const res =  await fetch(`${this.baseURL}/post${query}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n      console.log(data)\n    }catch(err){\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async getPostById(id) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      body: JSON.stringify({ category, title, text })\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async updatePost(id, category, title, text) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'PUT',\n      body: JSON.stringify({ category, title, text })\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async deletePost(id) {\n    const token = this.tokenStorage.getToken();\n\n    return await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'DELETE',\n    });\n  }\n\n  async getCategories() {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/category`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n}"]},"metadata":{},"sourceType":"module"}