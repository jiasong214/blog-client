{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst isMarkActive_1 = __importDefault(require(\"../queries/isMarkActive\"));\n\nfunction hasCode(state, pos) {\n  const {\n    code_inline\n  } = state.schema.marks;\n  const node = pos >= 0 && state.doc.nodeAt(pos);\n  return node ? !!node.marks.filter(mark => mark.type === code_inline).length : false;\n}\n\nfunction moveLeft() {\n  return (state, dispatch) => {\n    const {\n      code_inline\n    } = state.schema.marks;\n    const {\n      empty,\n      $cursor\n    } = state.selection;\n\n    if (!empty || !$cursor) {\n      return false;\n    }\n\n    const {\n      storedMarks\n    } = state.tr;\n\n    if (code_inline) {\n      const insideCode = code_inline && isMarkActive_1.default(code_inline)(state);\n      const currentPosHasCode = hasCode(state, $cursor.pos);\n      const nextPosHasCode = hasCode(state, $cursor.pos - 1);\n      const nextNextPosHasCode = hasCode(state, $cursor.pos - 2);\n      const exitingCode = currentPosHasCode && !nextPosHasCode && Array.isArray(storedMarks);\n      const atLeftEdge = nextPosHasCode && !nextNextPosHasCode && (storedMarks === null || Array.isArray(storedMarks) && !!storedMarks.length);\n      const atRightEdge = (exitingCode && Array.isArray(storedMarks) && !storedMarks.length || !exitingCode && storedMarks === null) && !nextPosHasCode && nextNextPosHasCode;\n      const enteringCode = !currentPosHasCode && nextPosHasCode && Array.isArray(storedMarks) && !storedMarks.length;\n\n      if (!insideCode && atRightEdge) {\n        const tr = state.tr.setSelection(prosemirror_state_1.Selection.near(state.doc.resolve($cursor.pos - 1)));\n        dispatch(tr.removeStoredMark(code_inline));\n        return true;\n      }\n\n      if (!insideCode && enteringCode) {\n        dispatch(state.tr.addStoredMark(code_inline.create()));\n        return true;\n      }\n\n      if (insideCode && atLeftEdge) {\n        const tr = state.tr.setSelection(prosemirror_state_1.Selection.near(state.doc.resolve($cursor.pos - 1)));\n        dispatch(tr.addStoredMark(code_inline.create()));\n        return true;\n      }\n\n      const isFirstChild = $cursor.index($cursor.depth - 1) === 0;\n\n      if (insideCode && (exitingCode || !$cursor.nodeBefore && isFirstChild)) {\n        dispatch(state.tr.removeStoredMark(code_inline));\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n\nexports.default = moveLeft;","map":{"version":3,"sources":["../../src/commands/moveLeft.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst isMarkActive_1 = __importDefault(require(\"../queries/isMarkActive\"));\nfunction hasCode(state, pos) {\n    const { code_inline } = state.schema.marks;\n    const node = pos >= 0 && state.doc.nodeAt(pos);\n    return node\n        ? !!node.marks.filter(mark => mark.type === code_inline).length\n        : false;\n}\nfunction moveLeft() {\n    return (state, dispatch) => {\n        const { code_inline } = state.schema.marks;\n        const { empty, $cursor } = state.selection;\n        if (!empty || !$cursor) {\n            return false;\n        }\n        const { storedMarks } = state.tr;\n        if (code_inline) {\n            const insideCode = code_inline && isMarkActive_1.default(code_inline)(state);\n            const currentPosHasCode = hasCode(state, $cursor.pos);\n            const nextPosHasCode = hasCode(state, $cursor.pos - 1);\n            const nextNextPosHasCode = hasCode(state, $cursor.pos - 2);\n            const exitingCode = currentPosHasCode && !nextPosHasCode && Array.isArray(storedMarks);\n            const atLeftEdge = nextPosHasCode &&\n                !nextNextPosHasCode &&\n                (storedMarks === null ||\n                    (Array.isArray(storedMarks) && !!storedMarks.length));\n            const atRightEdge = ((exitingCode && Array.isArray(storedMarks) && !storedMarks.length) ||\n                (!exitingCode && storedMarks === null)) &&\n                !nextPosHasCode &&\n                nextNextPosHasCode;\n            const enteringCode = !currentPosHasCode &&\n                nextPosHasCode &&\n                Array.isArray(storedMarks) &&\n                !storedMarks.length;\n            if (!insideCode && atRightEdge) {\n                const tr = state.tr.setSelection(prosemirror_state_1.Selection.near(state.doc.resolve($cursor.pos - 1)));\n                dispatch(tr.removeStoredMark(code_inline));\n                return true;\n            }\n            if (!insideCode && enteringCode) {\n                dispatch(state.tr.addStoredMark(code_inline.create()));\n                return true;\n            }\n            if (insideCode && atLeftEdge) {\n                const tr = state.tr.setSelection(prosemirror_state_1.Selection.near(state.doc.resolve($cursor.pos - 1)));\n                dispatch(tr.addStoredMark(code_inline.create()));\n                return true;\n            }\n            const isFirstChild = $cursor.index($cursor.depth - 1) === 0;\n            if (insideCode &&\n                (exitingCode || (!$cursor.nodeBefore && isFirstChild))) {\n                dispatch(state.tr.removeStoredMark(code_inline));\n                return true;\n            }\n        }\n        return false;\n    };\n}\nexports.default = moveLeft;\n//# sourceMappingURL=moveLeft.js.map"]},"metadata":{},"sourceType":"script"}