{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreatePost = ({\n  postService\n}) => {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty()); //if it's for update, set post's data\n\n  useEffect(() => {\n    if (params.id) {\n      postService.getPostById(params.id).then(data => setFormerData(...data)).catch(console.error());\n    }\n  }, [postService, params.id]); //if there is post's old data, convert html to draft\n\n  useEffect(() => {\n    if (formerData) {\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const {\n        contentBlocks,\n        entityMap\n      } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData]); //input handling\n\n  const onTitleChange = event => setPostTitle(event.target.value);\n\n  const onCategoryChange = event => setPostCategory(event.target.value);\n\n  const onEditorStateChange = editorState => setEditorState(editorState); //convert text to html\n\n\n  const convertToHtml = editorState => {\n    const rawText = convertToRaw(editorState.getCurrentContent());\n    const HtmlConversion = draftToHtml(rawText);\n    return HtmlConversion;\n  }; //convert category to array\n\n\n  const convertToArray = postCategory => {\n    if (!postCategory) return;\n    return postCategory.split(' ');\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: convertToHtml(editorState)\n    };\n\n    if (params.id) {\n      //if it's update\n      postService.updatePost(params.id, post.category, post.title, post.text).then(data => console.log(data)).catch(console.error());\n      history.push(`/post?id=${params.id}`);\n    } else {\n      //if it's create\n      postService.createPost(post.category, post.title, post.text).then(data => console.log(data)).catch(console.error());\n      history.push(\"/\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createPost\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__title\",\n        placeholder: \"Title\" // value={postTitle ? postTitle : ''}\n        ,\n        value: formerData ? formerData.title : postTitle ? postTitle : '',\n        onChange: event => onTitleChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__category\",\n        placeholder: \"#React #Javascript\" // value={postCategory ? postCategory : ''} \n        ,\n        value: formerData ? formerData.category : postCategory ? postCategory : '',\n        onChange: event => onCategoryChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        wrapperClassName: \"createPost__wrapper\",\n        editorClassName: \"createPost__editor\" //language setting\n        ,\n        localization: {\n          locale: \"en\"\n        } //tool bar setting\n        ,\n        toolbar: {\n          inline: {\n            inDropdown: true\n          },\n          list: {\n            inDropdown: true\n          },\n          textAlign: {\n            inDropdown: true\n          },\n          link: {\n            inDropdown: true\n          },\n          history: {\n            inDropdown: true\n          },\n          blockType: {\n            inDropdown: true\n          }\n        } //default state\n        ,\n        editorState: editorState //update state event\n        ,\n        onEditorStateChange: onEditorStateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"createPost__submitBtn\",\n        children: \"Compost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreatePost, \"slc6FZ7cISOk8hU+akepUPojs3E=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx"],"names":["React","useEffect","useState","useParams","useHistory","Editor","EditorState","convertToRaw","ContentState","draftToHtml","htmlToDraft","CreatePost","postService","history","params","formerData","setFormerData","postTitle","setPostTitle","postCategory","setPostCategory","editorState","setEditorState","createEmpty","id","getPostById","then","data","catch","console","error","blocksFromHtml","text","contentBlocks","entityMap","contentState","createFromBlockArray","createWithContent","onTitleChange","event","target","value","onCategoryChange","onEditorStateChange","convertToHtml","rawText","getCurrentContent","HtmlConversion","convertToArray","split","onSubmit","preventDefault","post","category","title","updatePost","log","push","createPost","locale","inline","inDropdown","list","textAlign","link","blockType"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\n\nconst CreatePost = ({postService}) => {\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  //if it's for update, set post's data\n  useEffect(() => {\n    if(params.id){\n      postService\n        .getPostById(params.id)\n        .then((data) => setFormerData(...data))\n        .catch(console.error());\n    }\n  }, [postService, params.id]);\n\n  //if there is post's old data, convert html to draft\n  useEffect(() => {\n    if(formerData){\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const { contentBlocks, entityMap } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData])\n\n  //input handling\n  const onTitleChange = (event) => setPostTitle(event.target.value);\n  const onCategoryChange = (event) => setPostCategory(event.target.value);\n  const onEditorStateChange = (editorState) => setEditorState(editorState);\n\n  //convert text to html\n  const convertToHtml = (editorState) => {\n    const rawText = convertToRaw(editorState.getCurrentContent())\n    const HtmlConversion = draftToHtml(rawText);\n\n    return HtmlConversion;\n  }\n\n  //convert category to array\n  const convertToArray = (postCategory) => {\n    if(!postCategory) return;\n    return postCategory.split(' ');\n  }\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: convertToHtml(editorState)\n    }\n\n    if(params.id){\n    //if it's update\n      postService\n        .updatePost(params.id , post.category, post.title, post.text)\n        .then((data) => console.log(data))\n        .catch(console.error());\n\n      history.push(`/post?id=${params.id}`)\n    }else {\n    //if it's create\n      postService\n      .createPost(post.category, post.title, post.text)\n      .then((data) => console.log(data))\n      .catch(console.error());\n\n      history.push(\"/\");\n    }\n  }\n\n\n  return (\n    <div className=\"createPost\">\n      <form onSubmit={onSubmit}>\n        <input \n          type=\"text\" \n          className=\"createPost__title\" \n          placeholder=\"Title\" \n          // value={postTitle ? postTitle : ''}\n          value={formerData ? formerData.title : postTitle ? postTitle : ''}\n          onChange={(event) => onTitleChange(event)} \n        />\n        <input  \n          type=\"text\" \n          className=\"createPost__category\" \n          placeholder=\"#React #Javascript\" \n          // value={postCategory ? postCategory : ''} \n          value={formerData ? formerData.category : postCategory ? postCategory : ''}\n          onChange={(event) => onCategoryChange(event)} \n        />\n        <Editor\n          wrapperClassName=\"createPost__wrapper\"\n          editorClassName=\"createPost__editor\"\n          \n          //language setting\n          localization={{ locale: \"en\" }}\n          //tool bar setting\n          toolbar={{\n            inline: { inDropdown: true },\n            list: { inDropdown: true },\n            textAlign: { inDropdown: true },\n            link: { inDropdown: true },\n            history: { inDropdown: true },\n            blockType: { inDropdown: true }\n          }}\n\n          //default state\n          editorState={editorState}\n          //update state event\n          onEditorStateChange={onEditorStateChange}\n        />\n        <button type='submit' className=\"createPost__submitBtn\">Compost</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreatePost;"]},"metadata":{},"sourceType":"module"}