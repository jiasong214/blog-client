{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport Markdown, { compiler } from 'markdown-to-jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreatePost = ({\n  postService,\n  changePostsByCreate,\n  changePostsByUpdate\n}) => {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty()); //UPDATE: if it's for update, set post's data\n\n  useEffect(() => {\n    if (params.id) {\n      postService.getPostById(params.id).then(data => setFormerData(data)).catch(console.error());\n    }\n  }, [postService, params.id]); //UPDATE: after formerData is set, set all input state with that.\n\n  useEffect(() => {\n    if (formerData) {\n      //set title, category state\n      setPostTitle(formerData.title);\n      setPostCategory(formerData.category); //convert html text to draft format and set state\n\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const {\n        contentBlocks,\n        entityMap\n      } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData]); //input handling\n\n  const onTitleChange = event => setPostTitle(event.target.value);\n\n  const onCategoryChange = event => setPostCategory(event.target.value);\n\n  const onEditorStateChange = editorState => setEditorState(editorState);\n\n  const [markdown, setMarkdown] = useState('');\n\n  const onMarkdownChange = event => setMarkdown(event.value); //convert draft format to html format\n\n\n  const convertToHtml = editorState => {\n    const rawText = convertToRaw(editorState.getCurrentContent());\n    const HtmlConversion = draftToHtml(rawText);\n    return HtmlConversion;\n  }; //convert category strings to array\n\n\n  const convertToArray = postCategory => {\n    if (!postCategory) return;\n    if (!postCategory.includes(\" \")) return;\n    let categoryArr = postCategory.split(' ');\n    return categoryArr.map(category => {\n      const lowerStr = category.toString().toLowerCase();\n      const pureStr = lowerStr.split(\"#\");\n      return pureStr[pureStr.length - 1];\n    }).toString();\n  }; //form submit\n\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: convertToHtml(editorState)\n    };\n\n    if (params.id) {\n      //UPDATE\n      postService.updatePost(params.id, post.category, post.title, post.text).then(data => changePostsByUpdate(params.id, data)).catch(console.error);\n      history.push(`/post/${params.id}`);\n    } else {\n      //CREATE\n      postService.createPost(post.category, post.title, post.text).then(data => changePostsByCreate(data)).catch(console.error);\n      history.push(\"/\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createPost\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__title\",\n        placeholder: \"Title\",\n        value: postTitle ? postTitle : '',\n        onChange: event => onTitleChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"createPost__category\",\n        placeholder: \"#React #Javascript\",\n        value: postCategory ? postCategory : '',\n        onChange: event => onCategoryChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Markdown, {\n        onChange: event => onMarkdownChange(event),\n        children: [\"# Hello world!\", markdown]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"createPost__submitBtn\",\n        children: \"Compost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreatePost, \"dSkqDBaCG2AZehmuXYCq0v5+lIc=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/pages/CreatePost.jsx"],"names":["React","useEffect","useState","useParams","useHistory","Editor","EditorState","convertToRaw","ContentState","draftToHtml","htmlToDraft","Markdown","compiler","CreatePost","postService","changePostsByCreate","changePostsByUpdate","history","params","formerData","setFormerData","postTitle","setPostTitle","postCategory","setPostCategory","editorState","setEditorState","createEmpty","id","getPostById","then","data","catch","console","error","title","category","blocksFromHtml","text","contentBlocks","entityMap","contentState","createFromBlockArray","createWithContent","onTitleChange","event","target","value","onCategoryChange","onEditorStateChange","markdown","setMarkdown","onMarkdownChange","convertToHtml","rawText","getCurrentContent","HtmlConversion","convertToArray","includes","categoryArr","split","map","lowerStr","toString","toLowerCase","pureStr","length","onSubmit","preventDefault","post","updatePost","push","createPost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router-dom';\nimport '../style/createPost.scss';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nimport Markdown, { compiler } from 'markdown-to-jsx';\n\nconst CreatePost = ({postService, changePostsByCreate, changePostsByUpdate}) => {\n  const history = useHistory();\n  const params = useParams();\n  const [formerData, setFormerData] = useState();\n  const [postTitle, setPostTitle] = useState();\n  const [postCategory, setPostCategory] = useState();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  \n\n  //UPDATE: if it's for update, set post's data\n  useEffect(() => {\n    if(params.id){\n      postService\n        .getPostById(params.id)\n        .then((data) => setFormerData(data))\n        .catch(console.error());\n    }\n  }, [postService, params.id]);\n\n  //UPDATE: after formerData is set, set all input state with that.\n  useEffect(() => {\n    if(formerData){\n      //set title, category state\n      setPostTitle(formerData.title);\n      setPostCategory(formerData.category);\n\n      //convert html text to draft format and set state\n      const blocksFromHtml = htmlToDraft(formerData.text);\n      const { contentBlocks, entityMap } = blocksFromHtml;\n      const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\n      const editorState = EditorState.createWithContent(contentState);\n      setEditorState(editorState);\n    }\n  }, [formerData])\n\n  //input handling\n  const onTitleChange = (event) => setPostTitle(event.target.value);\n  const onCategoryChange = (event) => setPostCategory(event.target.value);\n  const onEditorStateChange = (editorState) => setEditorState(editorState);\n\n  const [markdown, setMarkdown] = useState('');\n  const onMarkdownChange = (event) => setMarkdown(event.value);\n\n  //convert draft format to html format\n  const convertToHtml = (editorState) => {\n    const rawText = convertToRaw(editorState.getCurrentContent())\n    const HtmlConversion = draftToHtml(rawText);\n\n    return HtmlConversion;\n  }\n\n  //convert category strings to array\n  const convertToArray = (postCategory) => {\n    if(!postCategory) return;\n    if(!postCategory.includes(\" \")) return;\n\n    let categoryArr = postCategory.split(' ');\n\n    return categoryArr.map((category) => {\n      const lowerStr = category.toString().toLowerCase();\n      const pureStr = lowerStr.split(\"#\");\n\n      return pureStr[pureStr.length - 1];\n    }).toString();\n  }\n\n  //form submit\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const post = {\n      category: convertToArray(postCategory),\n      title: postTitle,\n      text: convertToHtml(editorState)\n    }\n\n    if(params.id){\n    //UPDATE\n      postService\n        .updatePost(params.id , post.category, post.title, post.text)\n        .then((data) => changePostsByUpdate(params.id, data))\n        .catch(console.error);\n\n      history.push(`/post/${params.id}`);\n    }else {\n    //CREATE\n      postService\n        .createPost(post.category, post.title, post.text)\n        .then((data) => changePostsByCreate(data))\n        .catch(console.error);\n\n      history.push(\"/\");\n    }\n  }\n\n\n  return (\n    <div className=\"createPost\">\n      <form onSubmit={onSubmit}>\n        <input \n          type=\"text\" \n          className=\"createPost__title\" \n          placeholder=\"Title\" \n          value={postTitle ? postTitle : ''}\n          onChange={(event) => onTitleChange(event)} \n        />\n        <input  \n          type=\"text\" \n          className=\"createPost__category\" \n          placeholder=\"#React #Javascript\" \n          value={postCategory ? postCategory : ''} \n          onChange={(event) => onCategoryChange(event)} \n        />\n        {/* <Editor\n          wrapperClassName=\"createPost__wrapper\"\n          editorClassName=\"createPost__editor\"\n          \n          //language setting\n          localization={{ locale: \"en\" }}\n          //tool bar setting\n          toolbar={{\n            inline: { inDropdown: true },\n            list: { inDropdown: true },\n            textAlign: { inDropdown: true },\n            link: { inDropdown: true },\n            history: { inDropdown: true },\n            blockType: { inDropdown: true }\n          }}\n\n          //default state\n          editorState={editorState}\n          //update state event\n          onEditorStateChange={onEditorStateChange}\n        /> */}\n        <Markdown onChange={(event) => onMarkdownChange(event)}># Hello world!{markdown}</Markdown>\n        <button type='submit' className=\"createPost__submitBtn\">Compost</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreatePost;"]},"metadata":{},"sourceType":"module"}