{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_view_1 = require(\"prosemirror-view\");\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nclass TableCell extends Node_1.default {\n  get name() {\n    return \"td\";\n  }\n\n  get schema() {\n    return {\n      content: \"paragraph+\",\n      tableRole: \"cell\",\n      isolating: true,\n      parseDOM: [{\n        tag: \"td\"\n      }],\n\n      toDOM(node) {\n        return [\"td\", node.attrs.alignment ? {\n          style: `text-align: ${node.attrs.alignment}`\n        } : {}, 0];\n      },\n\n      attrs: {\n        colspan: {\n          default: 1\n        },\n        rowspan: {\n          default: 1\n        },\n        alignment: {\n          default: null\n        }\n      }\n    };\n  }\n\n  toMarkdown(state, node) {\n    state.renderContent(node);\n  }\n\n  parseMarkdown() {\n    return {\n      block: \"td\",\n      getAttrs: tok => ({\n        alignment: tok.info\n      })\n    };\n  }\n\n  get plugins() {\n    return [new prosemirror_state_1.Plugin({\n      props: {\n        decorations: state => {\n          const {\n            doc,\n            selection\n          } = state;\n          const decorations = [];\n          const cells = prosemirror_utils_1.getCellsInColumn(0)(selection);\n\n          if (cells) {\n            cells.forEach(({\n              pos\n            }, index) => {\n              if (index === 0) {\n                decorations.push(prosemirror_view_1.Decoration.widget(pos + 1, () => {\n                  let className = \"grip-table\";\n                  const selected = prosemirror_utils_1.isTableSelected(selection);\n\n                  if (selected) {\n                    className += \" selected\";\n                  }\n\n                  const grip = document.createElement(\"a\");\n                  grip.className = className;\n                  grip.addEventListener(\"mousedown\", event => {\n                    event.preventDefault();\n                    this.options.onSelectTable(state);\n                  });\n                  return grip;\n                }));\n              }\n\n              decorations.push(prosemirror_view_1.Decoration.widget(pos + 1, () => {\n                const rowSelected = prosemirror_utils_1.isRowSelected(index)(selection);\n                let className = \"grip-row\";\n\n                if (rowSelected) {\n                  className += \" selected\";\n                }\n\n                if (index === 0) {\n                  className += \" first\";\n                } else if (index === cells.length - 1) {\n                  className += \" last\";\n                }\n\n                const grip = document.createElement(\"a\");\n                grip.className = className;\n                grip.addEventListener(\"mousedown\", event => {\n                  event.preventDefault();\n                  this.options.onSelectRow(index, state);\n                });\n                return grip;\n              }));\n            });\n          }\n\n          return prosemirror_view_1.DecorationSet.create(doc, decorations);\n        }\n      }\n    })];\n  }\n\n}\n\nexports.default = TableCell;","map":{"version":3,"sources":["../../src/nodes/TableCell.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_view_1 = require(\"prosemirror-view\");\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\nconst Node_1 = __importDefault(require(\"./Node\"));\nclass TableCell extends Node_1.default {\n    get name() {\n        return \"td\";\n    }\n    get schema() {\n        return {\n            content: \"paragraph+\",\n            tableRole: \"cell\",\n            isolating: true,\n            parseDOM: [{ tag: \"td\" }],\n            toDOM(node) {\n                return [\n                    \"td\",\n                    node.attrs.alignment\n                        ? { style: `text-align: ${node.attrs.alignment}` }\n                        : {},\n                    0,\n                ];\n            },\n            attrs: {\n                colspan: { default: 1 },\n                rowspan: { default: 1 },\n                alignment: { default: null },\n            },\n        };\n    }\n    toMarkdown(state, node) {\n        state.renderContent(node);\n    }\n    parseMarkdown() {\n        return {\n            block: \"td\",\n            getAttrs: tok => ({ alignment: tok.info }),\n        };\n    }\n    get plugins() {\n        return [\n            new prosemirror_state_1.Plugin({\n                props: {\n                    decorations: state => {\n                        const { doc, selection } = state;\n                        const decorations = [];\n                        const cells = prosemirror_utils_1.getCellsInColumn(0)(selection);\n                        if (cells) {\n                            cells.forEach(({ pos }, index) => {\n                                if (index === 0) {\n                                    decorations.push(prosemirror_view_1.Decoration.widget(pos + 1, () => {\n                                        let className = \"grip-table\";\n                                        const selected = prosemirror_utils_1.isTableSelected(selection);\n                                        if (selected) {\n                                            className += \" selected\";\n                                        }\n                                        const grip = document.createElement(\"a\");\n                                        grip.className = className;\n                                        grip.addEventListener(\"mousedown\", event => {\n                                            event.preventDefault();\n                                            this.options.onSelectTable(state);\n                                        });\n                                        return grip;\n                                    }));\n                                }\n                                decorations.push(prosemirror_view_1.Decoration.widget(pos + 1, () => {\n                                    const rowSelected = prosemirror_utils_1.isRowSelected(index)(selection);\n                                    let className = \"grip-row\";\n                                    if (rowSelected) {\n                                        className += \" selected\";\n                                    }\n                                    if (index === 0) {\n                                        className += \" first\";\n                                    }\n                                    else if (index === cells.length - 1) {\n                                        className += \" last\";\n                                    }\n                                    const grip = document.createElement(\"a\");\n                                    grip.className = className;\n                                    grip.addEventListener(\"mousedown\", event => {\n                                        event.preventDefault();\n                                        this.options.onSelectRow(index, state);\n                                    });\n                                    return grip;\n                                }));\n                            });\n                        }\n                        return prosemirror_view_1.DecorationSet.create(doc, decorations);\n                    },\n                },\n            }),\n        ];\n    }\n}\nexports.default = TableCell;\n//# sourceMappingURL=TableCell.js.map"]},"metadata":{},"sourceType":"script"}