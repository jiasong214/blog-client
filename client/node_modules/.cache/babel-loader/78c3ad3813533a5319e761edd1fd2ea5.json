{"ast":null,"code":"export default class PostService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.baseURL = 'http://localhost:8080';\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getPostsByCategory(category) {\n    const token = this.tokenStorage.getToken();\n    const query = category ? `/category/${category}` : '';\n    return this.http.fetch(query, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  async getPostById(id) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        category,\n        title,\n        text\n      })\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async updatePost(id, category, title, text) {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'PUT',\n      body: JSON.stringify({\n        category,\n        title,\n        text\n      })\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n  async deletePost(id) {\n    const token = this.tokenStorage.getToken();\n    return await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'DELETE'\n    });\n  }\n\n  async getCategories() {\n    const token = this.tokenStorage.getToken();\n    const res = await fetch(`${this.baseURL}/category`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'GET'\n    });\n    let data;\n\n    try {\n      data = res.json();\n    } catch (err) {\n      console.error(err);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/jia/Desktop/Portfolio/personal-blog/client/src/service/post.js"],"names":["PostService","constructor","http","tokenStorage","baseURL","getPostsByCategory","category","token","getToken","query","fetch","method","headers","Authorization","getPostById","id","res","data","json","err","console","error","createPost","title","text","body","JSON","stringify","updatePost","deletePost","getCategories"],"mappings":"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","sourcesContent":["export default class PostService {\n  constructor (http, tokenStorage) {\n    this.http = http;\n    this.baseURL = 'http://localhost:8080';\n    this.tokenStorage = tokenStorage;\n\n  }\n\n  async getPostsByCategory(category) {\n    const token = this.tokenStorage.getToken();\n\n    const query = category ? `/category/${category}` : '';\n    return this.http.fetch(query, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      }\n    })\n  }\n\n  async getPostById(id) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async createPost(category, title, text) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      body: JSON.stringify({ category, title, text })\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async updatePost(id, category, title, text) {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'PUT',\n      body: JSON.stringify({ category, title, text })\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n\n  async deletePost(id) {\n    const token = this.tokenStorage.getToken();\n\n    return await fetch(`${this.baseURL}/post/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'DELETE',\n    });\n  }\n\n  async getCategories() {\n    const token = this.tokenStorage.getToken();\n\n    const res =  await fetch(`${this.baseURL}/category`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'GET'\n    });\n\n    let data;\n    try{\n      data = res.json();\n    }catch(err){\n      console.error(err)\n    }\n\n    return data;\n  }\n}"]},"metadata":{},"sourceType":"module"}