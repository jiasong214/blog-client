{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst types_1 = require(\"../types\");\n\nfunction findPlaceholderLink(doc, href) {\n  let result;\n\n  function findLinks(node, pos = 0) {\n    if (node.type.name === \"text\") {\n      node.marks.forEach(mark => {\n        if (mark.type.name === \"link\") {\n          if (mark.attrs.href === href) {\n            result = {\n              node,\n              pos\n            };\n            if (result) return false;\n          }\n        }\n      });\n    }\n\n    if (!node.content.size) {\n      return;\n    }\n\n    node.descendants(findLinks);\n  }\n\n  findLinks(doc);\n  return result;\n}\n\nconst createAndInsertLink = async function (view, title, href, options) {\n  const {\n    dispatch,\n    state\n  } = view;\n  const {\n    onCreateLink,\n    onShowToast\n  } = options;\n\n  try {\n    const url = await onCreateLink(title);\n    const result = findPlaceholderLink(view.state.doc, href);\n    if (!result) return;\n    dispatch(view.state.tr.removeMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link).addMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link.create({\n      href: url\n    })));\n  } catch (err) {\n    const result = findPlaceholderLink(view.state.doc, href);\n    if (!result) return;\n    dispatch(view.state.tr.removeMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link));\n\n    if (onShowToast) {\n      onShowToast(options.dictionary.createLinkError, types_1.ToastType.Error);\n    }\n  }\n};\n\nexports.default = createAndInsertLink;","map":{"version":3,"sources":["../../src/commands/createAndInsertLink.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,SAAS,mBAAT,CAA6B,GAA7B,EAAkC,IAAlC,EAAsC;AACpC,MAAI,MAAJ;;AAEA,WAAS,SAAT,CAAmB,IAAnB,EAAyB,GAAG,GAAG,CAA/B,EAAgC;AAE9B,QAAI,IAAI,CAAC,IAAL,CAAU,IAAV,KAAmB,MAAvB,EAA+B;AAE7B,MAAA,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAG;AAExB,YAAI,IAAI,CAAC,IAAL,CAAU,IAAV,KAAmB,MAAvB,EAA+B;AAE7B,cAAI,IAAI,CAAC,KAAL,CAAW,IAAX,KAAoB,IAAxB,EAA8B;AAC5B,YAAA,MAAM,GAAG;AAAE,cAAA,IAAF;AAAQ,cAAA;AAAR,aAAT;AACA,gBAAI,MAAJ,EAAY,OAAO,KAAP;AACb;AACF;AACF,OATD;AAUD;;AAED,QAAI,CAAC,IAAI,CAAC,OAAL,CAAa,IAAlB,EAAwB;AACtB;AACD;;AAED,IAAA,IAAI,CAAC,WAAL,CAAiB,SAAjB;AACD;;AAED,EAAA,SAAS,CAAC,GAAD,CAAT;AACA,SAAO,MAAP;AACD;;AAED,MAAM,mBAAmB,GAAG,gBAC1B,IAD0B,EAE1B,KAF0B,EAG1B,IAH0B,EAI1B,OAJ0B,EAQzB;AAED,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,MAAsB,IAA5B;AACA,QAAM;AAAE,IAAA,YAAF;AAAgB,IAAA;AAAhB,MAAgC,OAAtC;;AAEA,MAAI;AACF,UAAM,GAAG,GAAG,MAAM,YAAY,CAAC,KAAD,CAA9B;AACA,UAAM,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAL,CAAW,GAAZ,EAAiB,IAAjB,CAAlC;AAEA,QAAI,CAAC,MAAL,EAAa;AAEb,IAAA,QAAQ,CACN,IAAI,CAAC,KAAL,CAAW,EAAX,CACG,UADH,CAEI,MAAM,CAAC,GAFX,EAGI,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,IAAP,CAAY,QAH7B,EAII,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,IAJvB,EAMG,OANH,CAOI,MAAM,CAAC,GAPX,EAQI,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,IAAP,CAAY,QAR7B,EASI,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,IAAnB,CAAwB,MAAxB,CAA+B;AAAE,MAAA,IAAI,EAAE;AAAR,KAA/B,CATJ,CADM,CAAR;AAaD,GAnBD,CAmBE,OAAO,GAAP,EAAY;AACZ,UAAM,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAL,CAAW,GAAZ,EAAiB,IAAjB,CAAlC;AACA,QAAI,CAAC,MAAL,EAAa;AAEb,IAAA,QAAQ,CACN,IAAI,CAAC,KAAL,CAAW,EAAX,CAAc,UAAd,CACE,MAAM,CAAC,GADT,EAEE,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,IAAP,CAAY,QAF3B,EAGE,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,IAHrB,CADM,CAAR;;AASA,QAAI,WAAJ,EAAiB;AACf,MAAA,WAAW,CAAC,OAAO,CAAC,UAAR,CAAmB,eAApB,EAAqC,OAAA,CAAA,SAAA,CAAU,KAA/C,CAAX;AACD;AACF;AACF,CAjDD;;AAmDA,OAAA,CAAA,OAAA,GAAe,mBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"../types\");\nfunction findPlaceholderLink(doc, href) {\n    let result;\n    function findLinks(node, pos = 0) {\n        if (node.type.name === \"text\") {\n            node.marks.forEach(mark => {\n                if (mark.type.name === \"link\") {\n                    if (mark.attrs.href === href) {\n                        result = { node, pos };\n                        if (result)\n                            return false;\n                    }\n                }\n            });\n        }\n        if (!node.content.size) {\n            return;\n        }\n        node.descendants(findLinks);\n    }\n    findLinks(doc);\n    return result;\n}\nconst createAndInsertLink = async function (view, title, href, options) {\n    const { dispatch, state } = view;\n    const { onCreateLink, onShowToast } = options;\n    try {\n        const url = await onCreateLink(title);\n        const result = findPlaceholderLink(view.state.doc, href);\n        if (!result)\n            return;\n        dispatch(view.state.tr\n            .removeMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link)\n            .addMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link.create({ href: url })));\n    }\n    catch (err) {\n        const result = findPlaceholderLink(view.state.doc, href);\n        if (!result)\n            return;\n        dispatch(view.state.tr.removeMark(result.pos, result.pos + result.node.nodeSize, state.schema.marks.link));\n        if (onShowToast) {\n            onShowToast(options.dictionary.createLinkError, types_1.ToastType.Error);\n        }\n    }\n};\nexports.default = createAndInsertLink;\n//# sourceMappingURL=createAndInsertLink.js.map"]},"metadata":{},"sourceType":"script"}